
Project-4-Display_Time_IntExt_RTC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034a8  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08003640  08003640  00013640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003650  08003650  00020048  2**0
                  CONTENTS
  4 .ARM          00000008  08003650  08003650  00013650  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003658  08003658  00020048  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003658  08003658  00013658  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800365c  0800365c  0001365c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000048  20000000  08003660  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  20000048  080036a8  00020048  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000108  080036a8  00020108  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
 12 .debug_info   000073b0  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000015af  00000000  00000000  00027428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000668  00000000  00000000  000289d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005b0  00000000  00000000  00029040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000161fc  00000000  00000000  000295f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007bf0  00000000  00000000  0003f7ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090220  00000000  00000000  000473dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d75fc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000019b4  00000000  00000000  000d764c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000048 	.word	0x20000048
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08003628 	.word	0x08003628

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000004c 	.word	0x2000004c
 80001d4:	08003628 	.word	0x08003628

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2iz>:
 8000974:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000978:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800097c:	d215      	bcs.n	80009aa <__aeabi_d2iz+0x36>
 800097e:	d511      	bpl.n	80009a4 <__aeabi_d2iz+0x30>
 8000980:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000984:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000988:	d912      	bls.n	80009b0 <__aeabi_d2iz+0x3c>
 800098a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800098e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000992:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000996:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800099a:	fa23 f002 	lsr.w	r0, r3, r2
 800099e:	bf18      	it	ne
 80009a0:	4240      	negne	r0, r0
 80009a2:	4770      	bx	lr
 80009a4:	f04f 0000 	mov.w	r0, #0
 80009a8:	4770      	bx	lr
 80009aa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ae:	d105      	bne.n	80009bc <__aeabi_d2iz+0x48>
 80009b0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009b4:	bf08      	it	eq
 80009b6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009ba:	4770      	bx	lr
 80009bc:	f04f 0000 	mov.w	r0, #0
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop

080009c4 <__aeabi_uldivmod>:
 80009c4:	b953      	cbnz	r3, 80009dc <__aeabi_uldivmod+0x18>
 80009c6:	b94a      	cbnz	r2, 80009dc <__aeabi_uldivmod+0x18>
 80009c8:	2900      	cmp	r1, #0
 80009ca:	bf08      	it	eq
 80009cc:	2800      	cmpeq	r0, #0
 80009ce:	bf1c      	itt	ne
 80009d0:	f04f 31ff 	movne.w	r1, #4294967295
 80009d4:	f04f 30ff 	movne.w	r0, #4294967295
 80009d8:	f000 b974 	b.w	8000cc4 <__aeabi_idiv0>
 80009dc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009e0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009e4:	f000 f806 	bl	80009f4 <__udivmoddi4>
 80009e8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009f0:	b004      	add	sp, #16
 80009f2:	4770      	bx	lr

080009f4 <__udivmoddi4>:
 80009f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009f8:	9d08      	ldr	r5, [sp, #32]
 80009fa:	4604      	mov	r4, r0
 80009fc:	468e      	mov	lr, r1
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d14d      	bne.n	8000a9e <__udivmoddi4+0xaa>
 8000a02:	428a      	cmp	r2, r1
 8000a04:	4694      	mov	ip, r2
 8000a06:	d969      	bls.n	8000adc <__udivmoddi4+0xe8>
 8000a08:	fab2 f282 	clz	r2, r2
 8000a0c:	b152      	cbz	r2, 8000a24 <__udivmoddi4+0x30>
 8000a0e:	fa01 f302 	lsl.w	r3, r1, r2
 8000a12:	f1c2 0120 	rsb	r1, r2, #32
 8000a16:	fa20 f101 	lsr.w	r1, r0, r1
 8000a1a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a1e:	ea41 0e03 	orr.w	lr, r1, r3
 8000a22:	4094      	lsls	r4, r2
 8000a24:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a28:	0c21      	lsrs	r1, r4, #16
 8000a2a:	fbbe f6f8 	udiv	r6, lr, r8
 8000a2e:	fa1f f78c 	uxth.w	r7, ip
 8000a32:	fb08 e316 	mls	r3, r8, r6, lr
 8000a36:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a3a:	fb06 f107 	mul.w	r1, r6, r7
 8000a3e:	4299      	cmp	r1, r3
 8000a40:	d90a      	bls.n	8000a58 <__udivmoddi4+0x64>
 8000a42:	eb1c 0303 	adds.w	r3, ip, r3
 8000a46:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a4a:	f080 811f 	bcs.w	8000c8c <__udivmoddi4+0x298>
 8000a4e:	4299      	cmp	r1, r3
 8000a50:	f240 811c 	bls.w	8000c8c <__udivmoddi4+0x298>
 8000a54:	3e02      	subs	r6, #2
 8000a56:	4463      	add	r3, ip
 8000a58:	1a5b      	subs	r3, r3, r1
 8000a5a:	b2a4      	uxth	r4, r4
 8000a5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a60:	fb08 3310 	mls	r3, r8, r0, r3
 8000a64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a68:	fb00 f707 	mul.w	r7, r0, r7
 8000a6c:	42a7      	cmp	r7, r4
 8000a6e:	d90a      	bls.n	8000a86 <__udivmoddi4+0x92>
 8000a70:	eb1c 0404 	adds.w	r4, ip, r4
 8000a74:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a78:	f080 810a 	bcs.w	8000c90 <__udivmoddi4+0x29c>
 8000a7c:	42a7      	cmp	r7, r4
 8000a7e:	f240 8107 	bls.w	8000c90 <__udivmoddi4+0x29c>
 8000a82:	4464      	add	r4, ip
 8000a84:	3802      	subs	r0, #2
 8000a86:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a8a:	1be4      	subs	r4, r4, r7
 8000a8c:	2600      	movs	r6, #0
 8000a8e:	b11d      	cbz	r5, 8000a98 <__udivmoddi4+0xa4>
 8000a90:	40d4      	lsrs	r4, r2
 8000a92:	2300      	movs	r3, #0
 8000a94:	e9c5 4300 	strd	r4, r3, [r5]
 8000a98:	4631      	mov	r1, r6
 8000a9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a9e:	428b      	cmp	r3, r1
 8000aa0:	d909      	bls.n	8000ab6 <__udivmoddi4+0xc2>
 8000aa2:	2d00      	cmp	r5, #0
 8000aa4:	f000 80ef 	beq.w	8000c86 <__udivmoddi4+0x292>
 8000aa8:	2600      	movs	r6, #0
 8000aaa:	e9c5 0100 	strd	r0, r1, [r5]
 8000aae:	4630      	mov	r0, r6
 8000ab0:	4631      	mov	r1, r6
 8000ab2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ab6:	fab3 f683 	clz	r6, r3
 8000aba:	2e00      	cmp	r6, #0
 8000abc:	d14a      	bne.n	8000b54 <__udivmoddi4+0x160>
 8000abe:	428b      	cmp	r3, r1
 8000ac0:	d302      	bcc.n	8000ac8 <__udivmoddi4+0xd4>
 8000ac2:	4282      	cmp	r2, r0
 8000ac4:	f200 80f9 	bhi.w	8000cba <__udivmoddi4+0x2c6>
 8000ac8:	1a84      	subs	r4, r0, r2
 8000aca:	eb61 0303 	sbc.w	r3, r1, r3
 8000ace:	2001      	movs	r0, #1
 8000ad0:	469e      	mov	lr, r3
 8000ad2:	2d00      	cmp	r5, #0
 8000ad4:	d0e0      	beq.n	8000a98 <__udivmoddi4+0xa4>
 8000ad6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ada:	e7dd      	b.n	8000a98 <__udivmoddi4+0xa4>
 8000adc:	b902      	cbnz	r2, 8000ae0 <__udivmoddi4+0xec>
 8000ade:	deff      	udf	#255	; 0xff
 8000ae0:	fab2 f282 	clz	r2, r2
 8000ae4:	2a00      	cmp	r2, #0
 8000ae6:	f040 8092 	bne.w	8000c0e <__udivmoddi4+0x21a>
 8000aea:	eba1 010c 	sub.w	r1, r1, ip
 8000aee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000af2:	fa1f fe8c 	uxth.w	lr, ip
 8000af6:	2601      	movs	r6, #1
 8000af8:	0c20      	lsrs	r0, r4, #16
 8000afa:	fbb1 f3f7 	udiv	r3, r1, r7
 8000afe:	fb07 1113 	mls	r1, r7, r3, r1
 8000b02:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b06:	fb0e f003 	mul.w	r0, lr, r3
 8000b0a:	4288      	cmp	r0, r1
 8000b0c:	d908      	bls.n	8000b20 <__udivmoddi4+0x12c>
 8000b0e:	eb1c 0101 	adds.w	r1, ip, r1
 8000b12:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b16:	d202      	bcs.n	8000b1e <__udivmoddi4+0x12a>
 8000b18:	4288      	cmp	r0, r1
 8000b1a:	f200 80cb 	bhi.w	8000cb4 <__udivmoddi4+0x2c0>
 8000b1e:	4643      	mov	r3, r8
 8000b20:	1a09      	subs	r1, r1, r0
 8000b22:	b2a4      	uxth	r4, r4
 8000b24:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b28:	fb07 1110 	mls	r1, r7, r0, r1
 8000b2c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b30:	fb0e fe00 	mul.w	lr, lr, r0
 8000b34:	45a6      	cmp	lr, r4
 8000b36:	d908      	bls.n	8000b4a <__udivmoddi4+0x156>
 8000b38:	eb1c 0404 	adds.w	r4, ip, r4
 8000b3c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b40:	d202      	bcs.n	8000b48 <__udivmoddi4+0x154>
 8000b42:	45a6      	cmp	lr, r4
 8000b44:	f200 80bb 	bhi.w	8000cbe <__udivmoddi4+0x2ca>
 8000b48:	4608      	mov	r0, r1
 8000b4a:	eba4 040e 	sub.w	r4, r4, lr
 8000b4e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000b52:	e79c      	b.n	8000a8e <__udivmoddi4+0x9a>
 8000b54:	f1c6 0720 	rsb	r7, r6, #32
 8000b58:	40b3      	lsls	r3, r6
 8000b5a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b5e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b62:	fa20 f407 	lsr.w	r4, r0, r7
 8000b66:	fa01 f306 	lsl.w	r3, r1, r6
 8000b6a:	431c      	orrs	r4, r3
 8000b6c:	40f9      	lsrs	r1, r7
 8000b6e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b72:	fa00 f306 	lsl.w	r3, r0, r6
 8000b76:	fbb1 f8f9 	udiv	r8, r1, r9
 8000b7a:	0c20      	lsrs	r0, r4, #16
 8000b7c:	fa1f fe8c 	uxth.w	lr, ip
 8000b80:	fb09 1118 	mls	r1, r9, r8, r1
 8000b84:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b88:	fb08 f00e 	mul.w	r0, r8, lr
 8000b8c:	4288      	cmp	r0, r1
 8000b8e:	fa02 f206 	lsl.w	r2, r2, r6
 8000b92:	d90b      	bls.n	8000bac <__udivmoddi4+0x1b8>
 8000b94:	eb1c 0101 	adds.w	r1, ip, r1
 8000b98:	f108 3aff 	add.w	sl, r8, #4294967295
 8000b9c:	f080 8088 	bcs.w	8000cb0 <__udivmoddi4+0x2bc>
 8000ba0:	4288      	cmp	r0, r1
 8000ba2:	f240 8085 	bls.w	8000cb0 <__udivmoddi4+0x2bc>
 8000ba6:	f1a8 0802 	sub.w	r8, r8, #2
 8000baa:	4461      	add	r1, ip
 8000bac:	1a09      	subs	r1, r1, r0
 8000bae:	b2a4      	uxth	r4, r4
 8000bb0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000bb4:	fb09 1110 	mls	r1, r9, r0, r1
 8000bb8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000bbc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000bc0:	458e      	cmp	lr, r1
 8000bc2:	d908      	bls.n	8000bd6 <__udivmoddi4+0x1e2>
 8000bc4:	eb1c 0101 	adds.w	r1, ip, r1
 8000bc8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bcc:	d26c      	bcs.n	8000ca8 <__udivmoddi4+0x2b4>
 8000bce:	458e      	cmp	lr, r1
 8000bd0:	d96a      	bls.n	8000ca8 <__udivmoddi4+0x2b4>
 8000bd2:	3802      	subs	r0, #2
 8000bd4:	4461      	add	r1, ip
 8000bd6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000bda:	fba0 9402 	umull	r9, r4, r0, r2
 8000bde:	eba1 010e 	sub.w	r1, r1, lr
 8000be2:	42a1      	cmp	r1, r4
 8000be4:	46c8      	mov	r8, r9
 8000be6:	46a6      	mov	lr, r4
 8000be8:	d356      	bcc.n	8000c98 <__udivmoddi4+0x2a4>
 8000bea:	d053      	beq.n	8000c94 <__udivmoddi4+0x2a0>
 8000bec:	b15d      	cbz	r5, 8000c06 <__udivmoddi4+0x212>
 8000bee:	ebb3 0208 	subs.w	r2, r3, r8
 8000bf2:	eb61 010e 	sbc.w	r1, r1, lr
 8000bf6:	fa01 f707 	lsl.w	r7, r1, r7
 8000bfa:	fa22 f306 	lsr.w	r3, r2, r6
 8000bfe:	40f1      	lsrs	r1, r6
 8000c00:	431f      	orrs	r7, r3
 8000c02:	e9c5 7100 	strd	r7, r1, [r5]
 8000c06:	2600      	movs	r6, #0
 8000c08:	4631      	mov	r1, r6
 8000c0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c0e:	f1c2 0320 	rsb	r3, r2, #32
 8000c12:	40d8      	lsrs	r0, r3
 8000c14:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c18:	fa21 f303 	lsr.w	r3, r1, r3
 8000c1c:	4091      	lsls	r1, r2
 8000c1e:	4301      	orrs	r1, r0
 8000c20:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c24:	fa1f fe8c 	uxth.w	lr, ip
 8000c28:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c2c:	fb07 3610 	mls	r6, r7, r0, r3
 8000c30:	0c0b      	lsrs	r3, r1, #16
 8000c32:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c36:	fb00 f60e 	mul.w	r6, r0, lr
 8000c3a:	429e      	cmp	r6, r3
 8000c3c:	fa04 f402 	lsl.w	r4, r4, r2
 8000c40:	d908      	bls.n	8000c54 <__udivmoddi4+0x260>
 8000c42:	eb1c 0303 	adds.w	r3, ip, r3
 8000c46:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c4a:	d22f      	bcs.n	8000cac <__udivmoddi4+0x2b8>
 8000c4c:	429e      	cmp	r6, r3
 8000c4e:	d92d      	bls.n	8000cac <__udivmoddi4+0x2b8>
 8000c50:	3802      	subs	r0, #2
 8000c52:	4463      	add	r3, ip
 8000c54:	1b9b      	subs	r3, r3, r6
 8000c56:	b289      	uxth	r1, r1
 8000c58:	fbb3 f6f7 	udiv	r6, r3, r7
 8000c5c:	fb07 3316 	mls	r3, r7, r6, r3
 8000c60:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c64:	fb06 f30e 	mul.w	r3, r6, lr
 8000c68:	428b      	cmp	r3, r1
 8000c6a:	d908      	bls.n	8000c7e <__udivmoddi4+0x28a>
 8000c6c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c70:	f106 38ff 	add.w	r8, r6, #4294967295
 8000c74:	d216      	bcs.n	8000ca4 <__udivmoddi4+0x2b0>
 8000c76:	428b      	cmp	r3, r1
 8000c78:	d914      	bls.n	8000ca4 <__udivmoddi4+0x2b0>
 8000c7a:	3e02      	subs	r6, #2
 8000c7c:	4461      	add	r1, ip
 8000c7e:	1ac9      	subs	r1, r1, r3
 8000c80:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000c84:	e738      	b.n	8000af8 <__udivmoddi4+0x104>
 8000c86:	462e      	mov	r6, r5
 8000c88:	4628      	mov	r0, r5
 8000c8a:	e705      	b.n	8000a98 <__udivmoddi4+0xa4>
 8000c8c:	4606      	mov	r6, r0
 8000c8e:	e6e3      	b.n	8000a58 <__udivmoddi4+0x64>
 8000c90:	4618      	mov	r0, r3
 8000c92:	e6f8      	b.n	8000a86 <__udivmoddi4+0x92>
 8000c94:	454b      	cmp	r3, r9
 8000c96:	d2a9      	bcs.n	8000bec <__udivmoddi4+0x1f8>
 8000c98:	ebb9 0802 	subs.w	r8, r9, r2
 8000c9c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ca0:	3801      	subs	r0, #1
 8000ca2:	e7a3      	b.n	8000bec <__udivmoddi4+0x1f8>
 8000ca4:	4646      	mov	r6, r8
 8000ca6:	e7ea      	b.n	8000c7e <__udivmoddi4+0x28a>
 8000ca8:	4620      	mov	r0, r4
 8000caa:	e794      	b.n	8000bd6 <__udivmoddi4+0x1e2>
 8000cac:	4640      	mov	r0, r8
 8000cae:	e7d1      	b.n	8000c54 <__udivmoddi4+0x260>
 8000cb0:	46d0      	mov	r8, sl
 8000cb2:	e77b      	b.n	8000bac <__udivmoddi4+0x1b8>
 8000cb4:	3b02      	subs	r3, #2
 8000cb6:	4461      	add	r1, ip
 8000cb8:	e732      	b.n	8000b20 <__udivmoddi4+0x12c>
 8000cba:	4630      	mov	r0, r6
 8000cbc:	e709      	b.n	8000ad2 <__udivmoddi4+0xde>
 8000cbe:	4464      	add	r4, ip
 8000cc0:	3802      	subs	r0, #2
 8000cc2:	e742      	b.n	8000b4a <__udivmoddi4+0x156>

08000cc4 <__aeabi_idiv0>:
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <main>:
int setTime(void);

uint32_t adc_scan(void);

int main(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  HAL_Init();
 8000ccc:	f000 fcf0 	bl	80016b0 <HAL_Init>

  SystemClock_Config();
 8000cd0:	f000 fa2e 	bl	8001130 <SystemClock_Config>

  MX_GPIO_Init();
 8000cd4:	f000 fb46 	bl	8001364 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000cd8:	f000 fa98 	bl	800120c <MX_ADC1_Init>
  MX_RTC_Init();
 8000cdc:	f000 fae8 	bl	80012b0 <MX_RTC_Init>

  while (1)
  {
	  GetTime();
 8000ce0:	f000 f8a0 	bl	8000e24 <GetTime>
	  displayNumber(hrs);
 8000ce4:	4b02      	ldr	r3, [pc, #8]	; (8000cf0 <main+0x28>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f000 f901 	bl	8000ef0 <displayNumber>
	  GetTime();
 8000cee:	e7f7      	b.n	8000ce0 <main+0x18>
 8000cf0:	200000f0 	.word	0x200000f0
 8000cf4:	00000000 	.word	0x00000000

08000cf8 <HAL_GPIO_EXTI_Callback>:
  }
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	4603      	mov	r3, r0
 8000d00:	80fb      	strh	r3, [r7, #6]
	Ex_int_counter = Ex_int_counter+1;
 8000d02:	4b41      	ldr	r3, [pc, #260]	; (8000e08 <HAL_GPIO_EXTI_Callback+0x110>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	3301      	adds	r3, #1
 8000d08:	4a3f      	ldr	r2, [pc, #252]	; (8000e08 <HAL_GPIO_EXTI_Callback+0x110>)
 8000d0a:	6013      	str	r3, [r2, #0]

	adc_scan();
 8000d0c:	f000 f8d2 	bl	8000eb4 <adc_scan>

	switch(Ex_int_counter)
 8000d10:	4b3d      	ldr	r3, [pc, #244]	; (8000e08 <HAL_GPIO_EXTI_Callback+0x110>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	2b03      	cmp	r3, #3
 8000d16:	d865      	bhi.n	8000de4 <HAL_GPIO_EXTI_Callback+0xec>
 8000d18:	a201      	add	r2, pc, #4	; (adr r2, 8000d20 <HAL_GPIO_EXTI_Callback+0x28>)
 8000d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d1e:	bf00      	nop
 8000d20:	08000ded 	.word	0x08000ded
 8000d24:	08000d31 	.word	0x08000d31
 8000d28:	08000d6d 	.word	0x08000d6d
 8000d2c:	08000da9 	.word	0x08000da9
	{
		case 0:
			break;

	    case 1:
			seg=adcValue / 68.28;
 8000d30:	4b36      	ldr	r3, [pc, #216]	; (8000e0c <HAL_GPIO_EXTI_Callback+0x114>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4618      	mov	r0, r3
 8000d36:	f7ff fb91 	bl	800045c <__aeabi_ui2d>
 8000d3a:	a32f      	add	r3, pc, #188	; (adr r3, 8000df8 <HAL_GPIO_EXTI_Callback+0x100>)
 8000d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d40:	f7ff fd30 	bl	80007a4 <__aeabi_ddiv>
 8000d44:	4602      	mov	r2, r0
 8000d46:	460b      	mov	r3, r1
 8000d48:	4610      	mov	r0, r2
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	f7ff fe12 	bl	8000974 <__aeabi_d2iz>
 8000d50:	4603      	mov	r3, r0
 8000d52:	4a2f      	ldr	r2, [pc, #188]	; (8000e10 <HAL_GPIO_EXTI_Callback+0x118>)
 8000d54:	6013      	str	r3, [r2, #0]
	    	sTime1.Seconds = seg;
 8000d56:	4b2e      	ldr	r3, [pc, #184]	; (8000e10 <HAL_GPIO_EXTI_Callback+0x118>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	b2da      	uxtb	r2, r3
 8000d5c:	4b2d      	ldr	r3, [pc, #180]	; (8000e14 <HAL_GPIO_EXTI_Callback+0x11c>)
 8000d5e:	709a      	strb	r2, [r3, #2]

	    	HAL_RTC_SetTime(&hrtc, &sTime1,RTC_FORMAT_BIN);
 8000d60:	2200      	movs	r2, #0
 8000d62:	492c      	ldr	r1, [pc, #176]	; (8000e14 <HAL_GPIO_EXTI_Callback+0x11c>)
 8000d64:	482c      	ldr	r0, [pc, #176]	; (8000e18 <HAL_GPIO_EXTI_Callback+0x120>)
 8000d66:	f002 f9ab 	bl	80030c0 <HAL_RTC_SetTime>

	    	break;
 8000d6a:	e040      	b.n	8000dee <HAL_GPIO_EXTI_Callback+0xf6>

	    case 2:
	    	min=adcValue / 68.28;
 8000d6c:	4b27      	ldr	r3, [pc, #156]	; (8000e0c <HAL_GPIO_EXTI_Callback+0x114>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4618      	mov	r0, r3
 8000d72:	f7ff fb73 	bl	800045c <__aeabi_ui2d>
 8000d76:	a320      	add	r3, pc, #128	; (adr r3, 8000df8 <HAL_GPIO_EXTI_Callback+0x100>)
 8000d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d7c:	f7ff fd12 	bl	80007a4 <__aeabi_ddiv>
 8000d80:	4602      	mov	r2, r0
 8000d82:	460b      	mov	r3, r1
 8000d84:	4610      	mov	r0, r2
 8000d86:	4619      	mov	r1, r3
 8000d88:	f7ff fdf4 	bl	8000974 <__aeabi_d2iz>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	4a23      	ldr	r2, [pc, #140]	; (8000e1c <HAL_GPIO_EXTI_Callback+0x124>)
 8000d90:	6013      	str	r3, [r2, #0]
	    	sTime1.Minutes = min;
 8000d92:	4b22      	ldr	r3, [pc, #136]	; (8000e1c <HAL_GPIO_EXTI_Callback+0x124>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	b2da      	uxtb	r2, r3
 8000d98:	4b1e      	ldr	r3, [pc, #120]	; (8000e14 <HAL_GPIO_EXTI_Callback+0x11c>)
 8000d9a:	705a      	strb	r2, [r3, #1]

	    	HAL_RTC_SetTime(&hrtc, &sTime1,RTC_FORMAT_BIN);
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	491d      	ldr	r1, [pc, #116]	; (8000e14 <HAL_GPIO_EXTI_Callback+0x11c>)
 8000da0:	481d      	ldr	r0, [pc, #116]	; (8000e18 <HAL_GPIO_EXTI_Callback+0x120>)
 8000da2:	f002 f98d 	bl	80030c0 <HAL_RTC_SetTime>

	    	break;
 8000da6:	e022      	b.n	8000dee <HAL_GPIO_EXTI_Callback+0xf6>

		case 3:
	    	hour=adcValue / 170.7;
 8000da8:	4b18      	ldr	r3, [pc, #96]	; (8000e0c <HAL_GPIO_EXTI_Callback+0x114>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4618      	mov	r0, r3
 8000dae:	f7ff fb55 	bl	800045c <__aeabi_ui2d>
 8000db2:	a313      	add	r3, pc, #76	; (adr r3, 8000e00 <HAL_GPIO_EXTI_Callback+0x108>)
 8000db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000db8:	f7ff fcf4 	bl	80007a4 <__aeabi_ddiv>
 8000dbc:	4602      	mov	r2, r0
 8000dbe:	460b      	mov	r3, r1
 8000dc0:	4610      	mov	r0, r2
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	f7ff fdd6 	bl	8000974 <__aeabi_d2iz>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	4a15      	ldr	r2, [pc, #84]	; (8000e20 <HAL_GPIO_EXTI_Callback+0x128>)
 8000dcc:	6013      	str	r3, [r2, #0]
	    	sTime1.Hours = hour;
 8000dce:	4b14      	ldr	r3, [pc, #80]	; (8000e20 <HAL_GPIO_EXTI_Callback+0x128>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	b2da      	uxtb	r2, r3
 8000dd4:	4b0f      	ldr	r3, [pc, #60]	; (8000e14 <HAL_GPIO_EXTI_Callback+0x11c>)
 8000dd6:	701a      	strb	r2, [r3, #0]

	   		HAL_RTC_SetTime(&hrtc, &sTime1,RTC_FORMAT_BIN);
 8000dd8:	2200      	movs	r2, #0
 8000dda:	490e      	ldr	r1, [pc, #56]	; (8000e14 <HAL_GPIO_EXTI_Callback+0x11c>)
 8000ddc:	480e      	ldr	r0, [pc, #56]	; (8000e18 <HAL_GPIO_EXTI_Callback+0x120>)
 8000dde:	f002 f96f 	bl	80030c0 <HAL_RTC_SetTime>

	    	break;
 8000de2:	e004      	b.n	8000dee <HAL_GPIO_EXTI_Callback+0xf6>

		default:
	    	Ex_int_counter = 0;
 8000de4:	4b08      	ldr	r3, [pc, #32]	; (8000e08 <HAL_GPIO_EXTI_Callback+0x110>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	601a      	str	r2, [r3, #0]

	    	break;
 8000dea:	e000      	b.n	8000dee <HAL_GPIO_EXTI_Callback+0xf6>
			break;
 8000dec:	bf00      	nop
	}
}
 8000dee:	bf00      	nop
 8000df0:	3708      	adds	r7, #8
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	851eb852 	.word	0x851eb852
 8000dfc:	405111eb 	.word	0x405111eb
 8000e00:	66666666 	.word	0x66666666
 8000e04:	40655666 	.word	0x40655666
 8000e08:	200000f8 	.word	0x200000f8
 8000e0c:	200000fc 	.word	0x200000fc
 8000e10:	200000e4 	.word	0x200000e4
 8000e14:	200000cc 	.word	0x200000cc
 8000e18:	200000ac 	.word	0x200000ac
 8000e1c:	200000e8 	.word	0x200000e8
 8000e20:	200000f4 	.word	0x200000f4

08000e24 <GetTime>:

int GetTime (void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
    HAL_RTC_GetDate(&hrtc, &sDate1,RTC_FORMAT_BIN);
 8000e28:	2200      	movs	r2, #0
 8000e2a:	491a      	ldr	r1, [pc, #104]	; (8000e94 <GetTime+0x70>)
 8000e2c:	481a      	ldr	r0, [pc, #104]	; (8000e98 <GetTime+0x74>)
 8000e2e:	f002 fac3 	bl	80033b8 <HAL_RTC_GetDate>
    HAL_RTC_GetTime(&hrtc, &sTime1,RTC_FORMAT_BIN);
 8000e32:	2200      	movs	r2, #0
 8000e34:	4919      	ldr	r1, [pc, #100]	; (8000e9c <GetTime+0x78>)
 8000e36:	4818      	ldr	r0, [pc, #96]	; (8000e98 <GetTime+0x74>)
 8000e38:	f002 f9dc 	bl	80031f4 <HAL_RTC_GetTime>

    seg = sTime1.Seconds;
 8000e3c:	4b17      	ldr	r3, [pc, #92]	; (8000e9c <GetTime+0x78>)
 8000e3e:	789b      	ldrb	r3, [r3, #2]
 8000e40:	461a      	mov	r2, r3
 8000e42:	4b17      	ldr	r3, [pc, #92]	; (8000ea0 <GetTime+0x7c>)
 8000e44:	601a      	str	r2, [r3, #0]
    min = sTime1.Minutes;
 8000e46:	4b15      	ldr	r3, [pc, #84]	; (8000e9c <GetTime+0x78>)
 8000e48:	785b      	ldrb	r3, [r3, #1]
 8000e4a:	461a      	mov	r2, r3
 8000e4c:	4b15      	ldr	r3, [pc, #84]	; (8000ea4 <GetTime+0x80>)
 8000e4e:	601a      	str	r2, [r3, #0]
    hr = sTime1.Hours;
 8000e50:	4b12      	ldr	r3, [pc, #72]	; (8000e9c <GetTime+0x78>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	461a      	mov	r2, r3
 8000e56:	4b14      	ldr	r3, [pc, #80]	; (8000ea8 <GetTime+0x84>)
 8000e58:	601a      	str	r2, [r3, #0]

    hr = hr*1000000;
 8000e5a:	4b13      	ldr	r3, [pc, #76]	; (8000ea8 <GetTime+0x84>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4a13      	ldr	r2, [pc, #76]	; (8000eac <GetTime+0x88>)
 8000e60:	fb02 f303 	mul.w	r3, r2, r3
 8000e64:	4a10      	ldr	r2, [pc, #64]	; (8000ea8 <GetTime+0x84>)
 8000e66:	6013      	str	r3, [r2, #0]
    min = min*1000;
 8000e68:	4b0e      	ldr	r3, [pc, #56]	; (8000ea4 <GetTime+0x80>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e70:	fb02 f303 	mul.w	r3, r2, r3
 8000e74:	4a0b      	ldr	r2, [pc, #44]	; (8000ea4 <GetTime+0x80>)
 8000e76:	6013      	str	r3, [r2, #0]

    hrs = hr + min + seg;
 8000e78:	4b0b      	ldr	r3, [pc, #44]	; (8000ea8 <GetTime+0x84>)
 8000e7a:	681a      	ldr	r2, [r3, #0]
 8000e7c:	4b09      	ldr	r3, [pc, #36]	; (8000ea4 <GetTime+0x80>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	441a      	add	r2, r3
 8000e82:	4b07      	ldr	r3, [pc, #28]	; (8000ea0 <GetTime+0x7c>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4413      	add	r3, r2
 8000e88:	4a09      	ldr	r2, [pc, #36]	; (8000eb0 <GetTime+0x8c>)
 8000e8a:	6013      	str	r3, [r2, #0]

    return hrs;
 8000e8c:	4b08      	ldr	r3, [pc, #32]	; (8000eb0 <GetTime+0x8c>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	200000e0 	.word	0x200000e0
 8000e98:	200000ac 	.word	0x200000ac
 8000e9c:	200000cc 	.word	0x200000cc
 8000ea0:	200000e4 	.word	0x200000e4
 8000ea4:	200000e8 	.word	0x200000e8
 8000ea8:	200000ec 	.word	0x200000ec
 8000eac:	000f4240 	.word	0x000f4240
 8000eb0:	200000f0 	.word	0x200000f0

08000eb4 <adc_scan>:

uint32_t adc_scan(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
    HAL_ADC_Start(&hadc1);
 8000eb8:	480b      	ldr	r0, [pc, #44]	; (8000ee8 <adc_scan+0x34>)
 8000eba:	f000 fcd3 	bl	8001864 <HAL_ADC_Start>

    if(HAL_ADC_PollForConversion(&hadc1, 5) == HAL_OK)
 8000ebe:	2105      	movs	r1, #5
 8000ec0:	4809      	ldr	r0, [pc, #36]	; (8000ee8 <adc_scan+0x34>)
 8000ec2:	f000 fdb6 	bl	8001a32 <HAL_ADC_PollForConversion>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d105      	bne.n	8000ed8 <adc_scan+0x24>
	{
		adcValue = HAL_ADC_GetValue(&hadc1);
 8000ecc:	4806      	ldr	r0, [pc, #24]	; (8000ee8 <adc_scan+0x34>)
 8000ece:	f000 fe3b 	bl	8001b48 <HAL_ADC_GetValue>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	4a05      	ldr	r2, [pc, #20]	; (8000eec <adc_scan+0x38>)
 8000ed6:	6013      	str	r3, [r2, #0]
    }

	HAL_ADC_Stop(&hadc1);
 8000ed8:	4803      	ldr	r0, [pc, #12]	; (8000ee8 <adc_scan+0x34>)
 8000eda:	f000 fd77 	bl	80019cc <HAL_ADC_Stop>

	return adcValue;
 8000ede:	4b03      	ldr	r3, [pc, #12]	; (8000eec <adc_scan+0x38>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	20000064 	.word	0x20000064
 8000eec:	200000fc 	.word	0x200000fc

08000ef0 <displayNumber>:

void displayNumber(int number)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b08e      	sub	sp, #56	; 0x38
 8000ef4:	af04      	add	r7, sp, #16
 8000ef6:	6078      	str	r0, [r7, #4]
	int dig1,dig2,dig3,dig4,dig5,dig6,dig7,dig8;

	dig8 = number%10;
 8000ef8:	687a      	ldr	r2, [r7, #4]
 8000efa:	4b4f      	ldr	r3, [pc, #316]	; (8001038 <displayNumber+0x148>)
 8000efc:	fb83 1302 	smull	r1, r3, r3, r2
 8000f00:	1099      	asrs	r1, r3, #2
 8000f02:	17d3      	asrs	r3, r2, #31
 8000f04:	1ac9      	subs	r1, r1, r3
 8000f06:	460b      	mov	r3, r1
 8000f08:	009b      	lsls	r3, r3, #2
 8000f0a:	440b      	add	r3, r1
 8000f0c:	005b      	lsls	r3, r3, #1
 8000f0e:	1ad3      	subs	r3, r2, r3
 8000f10:	627b      	str	r3, [r7, #36]	; 0x24
	dig7 = (number%100)/10;
 8000f12:	687a      	ldr	r2, [r7, #4]
 8000f14:	4b49      	ldr	r3, [pc, #292]	; (800103c <displayNumber+0x14c>)
 8000f16:	fb83 1302 	smull	r1, r3, r3, r2
 8000f1a:	1159      	asrs	r1, r3, #5
 8000f1c:	17d3      	asrs	r3, r2, #31
 8000f1e:	1acb      	subs	r3, r1, r3
 8000f20:	2164      	movs	r1, #100	; 0x64
 8000f22:	fb01 f303 	mul.w	r3, r1, r3
 8000f26:	1ad3      	subs	r3, r2, r3
 8000f28:	4a43      	ldr	r2, [pc, #268]	; (8001038 <displayNumber+0x148>)
 8000f2a:	fb82 1203 	smull	r1, r2, r2, r3
 8000f2e:	1092      	asrs	r2, r2, #2
 8000f30:	17db      	asrs	r3, r3, #31
 8000f32:	1ad3      	subs	r3, r2, r3
 8000f34:	623b      	str	r3, [r7, #32]
	dig6 = (number%1000)/100;
 8000f36:	687a      	ldr	r2, [r7, #4]
 8000f38:	4b41      	ldr	r3, [pc, #260]	; (8001040 <displayNumber+0x150>)
 8000f3a:	fb83 1302 	smull	r1, r3, r3, r2
 8000f3e:	1199      	asrs	r1, r3, #6
 8000f40:	17d3      	asrs	r3, r2, #31
 8000f42:	1acb      	subs	r3, r1, r3
 8000f44:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000f48:	fb01 f303 	mul.w	r3, r1, r3
 8000f4c:	1ad3      	subs	r3, r2, r3
 8000f4e:	4a3b      	ldr	r2, [pc, #236]	; (800103c <displayNumber+0x14c>)
 8000f50:	fb82 1203 	smull	r1, r2, r2, r3
 8000f54:	1152      	asrs	r2, r2, #5
 8000f56:	17db      	asrs	r3, r3, #31
 8000f58:	1ad3      	subs	r3, r2, r3
 8000f5a:	61fb      	str	r3, [r7, #28]
	dig5 = (number%10000)/1000;
 8000f5c:	687a      	ldr	r2, [r7, #4]
 8000f5e:	4b39      	ldr	r3, [pc, #228]	; (8001044 <displayNumber+0x154>)
 8000f60:	fb83 1302 	smull	r1, r3, r3, r2
 8000f64:	1319      	asrs	r1, r3, #12
 8000f66:	17d3      	asrs	r3, r2, #31
 8000f68:	1acb      	subs	r3, r1, r3
 8000f6a:	f242 7110 	movw	r1, #10000	; 0x2710
 8000f6e:	fb01 f303 	mul.w	r3, r1, r3
 8000f72:	1ad3      	subs	r3, r2, r3
 8000f74:	4a32      	ldr	r2, [pc, #200]	; (8001040 <displayNumber+0x150>)
 8000f76:	fb82 1203 	smull	r1, r2, r2, r3
 8000f7a:	1192      	asrs	r2, r2, #6
 8000f7c:	17db      	asrs	r3, r3, #31
 8000f7e:	1ad3      	subs	r3, r2, r3
 8000f80:	61bb      	str	r3, [r7, #24]
	dig4 = (number%100000)/10000;
 8000f82:	687a      	ldr	r2, [r7, #4]
 8000f84:	4b30      	ldr	r3, [pc, #192]	; (8001048 <displayNumber+0x158>)
 8000f86:	fb83 1302 	smull	r1, r3, r3, r2
 8000f8a:	1359      	asrs	r1, r3, #13
 8000f8c:	17d3      	asrs	r3, r2, #31
 8000f8e:	1acb      	subs	r3, r1, r3
 8000f90:	492e      	ldr	r1, [pc, #184]	; (800104c <displayNumber+0x15c>)
 8000f92:	fb01 f303 	mul.w	r3, r1, r3
 8000f96:	1ad3      	subs	r3, r2, r3
 8000f98:	4a2a      	ldr	r2, [pc, #168]	; (8001044 <displayNumber+0x154>)
 8000f9a:	fb82 1203 	smull	r1, r2, r2, r3
 8000f9e:	1312      	asrs	r2, r2, #12
 8000fa0:	17db      	asrs	r3, r3, #31
 8000fa2:	1ad3      	subs	r3, r2, r3
 8000fa4:	617b      	str	r3, [r7, #20]
	dig3 = (number%1000000)/100000;
 8000fa6:	687a      	ldr	r2, [r7, #4]
 8000fa8:	4b29      	ldr	r3, [pc, #164]	; (8001050 <displayNumber+0x160>)
 8000faa:	fb83 1302 	smull	r1, r3, r3, r2
 8000fae:	1499      	asrs	r1, r3, #18
 8000fb0:	17d3      	asrs	r3, r2, #31
 8000fb2:	1acb      	subs	r3, r1, r3
 8000fb4:	4927      	ldr	r1, [pc, #156]	; (8001054 <displayNumber+0x164>)
 8000fb6:	fb01 f303 	mul.w	r3, r1, r3
 8000fba:	1ad3      	subs	r3, r2, r3
 8000fbc:	4a22      	ldr	r2, [pc, #136]	; (8001048 <displayNumber+0x158>)
 8000fbe:	fb82 1203 	smull	r1, r2, r2, r3
 8000fc2:	1352      	asrs	r2, r2, #13
 8000fc4:	17db      	asrs	r3, r3, #31
 8000fc6:	1ad3      	subs	r3, r2, r3
 8000fc8:	613b      	str	r3, [r7, #16]
	dig2 = (number%10000000)/1000000;
 8000fca:	687a      	ldr	r2, [r7, #4]
 8000fcc:	4b22      	ldr	r3, [pc, #136]	; (8001058 <displayNumber+0x168>)
 8000fce:	fb83 1302 	smull	r1, r3, r3, r2
 8000fd2:	1599      	asrs	r1, r3, #22
 8000fd4:	17d3      	asrs	r3, r2, #31
 8000fd6:	1acb      	subs	r3, r1, r3
 8000fd8:	4920      	ldr	r1, [pc, #128]	; (800105c <displayNumber+0x16c>)
 8000fda:	fb01 f303 	mul.w	r3, r1, r3
 8000fde:	1ad3      	subs	r3, r2, r3
 8000fe0:	4a1b      	ldr	r2, [pc, #108]	; (8001050 <displayNumber+0x160>)
 8000fe2:	fb82 1203 	smull	r1, r2, r2, r3
 8000fe6:	1492      	asrs	r2, r2, #18
 8000fe8:	17db      	asrs	r3, r3, #31
 8000fea:	1ad3      	subs	r3, r2, r3
 8000fec:	60fb      	str	r3, [r7, #12]
	dig1 = (number%100000000)/10000000;
 8000fee:	687a      	ldr	r2, [r7, #4]
 8000ff0:	4b1b      	ldr	r3, [pc, #108]	; (8001060 <displayNumber+0x170>)
 8000ff2:	fb83 1302 	smull	r1, r3, r3, r2
 8000ff6:	1659      	asrs	r1, r3, #25
 8000ff8:	17d3      	asrs	r3, r2, #31
 8000ffa:	1acb      	subs	r3, r1, r3
 8000ffc:	4919      	ldr	r1, [pc, #100]	; (8001064 <displayNumber+0x174>)
 8000ffe:	fb01 f303 	mul.w	r3, r1, r3
 8001002:	1ad3      	subs	r3, r2, r3
 8001004:	4a14      	ldr	r2, [pc, #80]	; (8001058 <displayNumber+0x168>)
 8001006:	fb82 1203 	smull	r1, r2, r2, r3
 800100a:	1592      	asrs	r2, r2, #22
 800100c:	17db      	asrs	r3, r3, #31
 800100e:	1ad3      	subs	r3, r2, r3
 8001010:	60bb      	str	r3, [r7, #8]

	setDisplay(dig1,dig2,dig3,dig4,dig5,dig6,dig7,dig8);
 8001012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001014:	9303      	str	r3, [sp, #12]
 8001016:	6a3b      	ldr	r3, [r7, #32]
 8001018:	9302      	str	r3, [sp, #8]
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	9301      	str	r3, [sp, #4]
 800101e:	69bb      	ldr	r3, [r7, #24]
 8001020:	9300      	str	r3, [sp, #0]
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	693a      	ldr	r2, [r7, #16]
 8001026:	68f9      	ldr	r1, [r7, #12]
 8001028:	68b8      	ldr	r0, [r7, #8]
 800102a:	f000 f81d 	bl	8001068 <setDisplay>
}
 800102e:	bf00      	nop
 8001030:	3728      	adds	r7, #40	; 0x28
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	66666667 	.word	0x66666667
 800103c:	51eb851f 	.word	0x51eb851f
 8001040:	10624dd3 	.word	0x10624dd3
 8001044:	68db8bad 	.word	0x68db8bad
 8001048:	14f8b589 	.word	0x14f8b589
 800104c:	000186a0 	.word	0x000186a0
 8001050:	431bde83 	.word	0x431bde83
 8001054:	000f4240 	.word	0x000f4240
 8001058:	6b5fca6b 	.word	0x6b5fca6b
 800105c:	00989680 	.word	0x00989680
 8001060:	55e63b89 	.word	0x55e63b89
 8001064:	05f5e100 	.word	0x05f5e100

08001068 <setDisplay>:

void setDisplay(int dig1, int dig2, int dig3, int dig4, int dig5, int dig6, int dig7, int dig8)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
 800106e:	60f8      	str	r0, [r7, #12]
 8001070:	60b9      	str	r1, [r7, #8]
 8001072:	607a      	str	r2, [r7, #4]
 8001074:	603b      	str	r3, [r7, #0]
	GPIOC->ODR = D8 + numeros[dig8];
 8001076:	4a26      	ldr	r2, [pc, #152]	; (8001110 <setDisplay+0xa8>)
 8001078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800107a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800107e:	4b25      	ldr	r3, [pc, #148]	; (8001114 <setDisplay+0xac>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	441a      	add	r2, r3
 8001084:	4b24      	ldr	r3, [pc, #144]	; (8001118 <setDisplay+0xb0>)
 8001086:	615a      	str	r2, [r3, #20]
	HAL_Delay(1);
 8001088:	2001      	movs	r0, #1
 800108a:	f000 fb83 	bl	8001794 <HAL_Delay>

	GPIOC->ODR = D7 + numeros[dig7];
 800108e:	4a20      	ldr	r2, [pc, #128]	; (8001110 <setDisplay+0xa8>)
 8001090:	6a3b      	ldr	r3, [r7, #32]
 8001092:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001096:	4b21      	ldr	r3, [pc, #132]	; (800111c <setDisplay+0xb4>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	441a      	add	r2, r3
 800109c:	4b1e      	ldr	r3, [pc, #120]	; (8001118 <setDisplay+0xb0>)
 800109e:	615a      	str	r2, [r3, #20]
	HAL_Delay(1);
 80010a0:	2001      	movs	r0, #1
 80010a2:	f000 fb77 	bl	8001794 <HAL_Delay>

	GPIOC->ODR = D5 + numeros[dig5];
 80010a6:	4a1a      	ldr	r2, [pc, #104]	; (8001110 <setDisplay+0xa8>)
 80010a8:	69bb      	ldr	r3, [r7, #24]
 80010aa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80010ae:	4b1c      	ldr	r3, [pc, #112]	; (8001120 <setDisplay+0xb8>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	441a      	add	r2, r3
 80010b4:	4b18      	ldr	r3, [pc, #96]	; (8001118 <setDisplay+0xb0>)
 80010b6:	615a      	str	r2, [r3, #20]
	HAL_Delay(1);
 80010b8:	2001      	movs	r0, #1
 80010ba:	f000 fb6b 	bl	8001794 <HAL_Delay>

	GPIOC->ODR = D4 + numeros[dig4];
 80010be:	4a14      	ldr	r2, [pc, #80]	; (8001110 <setDisplay+0xa8>)
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80010c6:	4b17      	ldr	r3, [pc, #92]	; (8001124 <setDisplay+0xbc>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	441a      	add	r2, r3
 80010cc:	4b12      	ldr	r3, [pc, #72]	; (8001118 <setDisplay+0xb0>)
 80010ce:	615a      	str	r2, [r3, #20]
	HAL_Delay(1);
 80010d0:	2001      	movs	r0, #1
 80010d2:	f000 fb5f 	bl	8001794 <HAL_Delay>

	GPIOC->ODR = D2 + numeros[dig2];
 80010d6:	4a0e      	ldr	r2, [pc, #56]	; (8001110 <setDisplay+0xa8>)
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80010de:	4b12      	ldr	r3, [pc, #72]	; (8001128 <setDisplay+0xc0>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	441a      	add	r2, r3
 80010e4:	4b0c      	ldr	r3, [pc, #48]	; (8001118 <setDisplay+0xb0>)
 80010e6:	615a      	str	r2, [r3, #20]
	HAL_Delay(1);
 80010e8:	2001      	movs	r0, #1
 80010ea:	f000 fb53 	bl	8001794 <HAL_Delay>

	GPIOC->ODR = D1 + numeros[dig1];
 80010ee:	4a08      	ldr	r2, [pc, #32]	; (8001110 <setDisplay+0xa8>)
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80010f6:	4b0d      	ldr	r3, [pc, #52]	; (800112c <setDisplay+0xc4>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	441a      	add	r2, r3
 80010fc:	4b06      	ldr	r3, [pc, #24]	; (8001118 <setDisplay+0xb0>)
 80010fe:	615a      	str	r2, [r3, #20]
	HAL_Delay(1);
 8001100:	2001      	movs	r0, #1
 8001102:	f000 fb47 	bl	8001794 <HAL_Delay>
}
 8001106:	bf00      	nop
 8001108:	3710      	adds	r7, #16
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	20000014 	.word	0x20000014
 8001114:	20000100 	.word	0x20000100
 8001118:	40020800 	.word	0x40020800
 800111c:	20000010 	.word	0x20000010
 8001120:	2000000c 	.word	0x2000000c
 8001124:	20000008 	.word	0x20000008
 8001128:	20000004 	.word	0x20000004
 800112c:	20000000 	.word	0x20000000

08001130 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b094      	sub	sp, #80	; 0x50
 8001134:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001136:	f107 0320 	add.w	r3, r7, #32
 800113a:	2230      	movs	r2, #48	; 0x30
 800113c:	2100      	movs	r1, #0
 800113e:	4618      	mov	r0, r3
 8001140:	f002 fa6a 	bl	8003618 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001144:	f107 030c 	add.w	r3, r7, #12
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	605a      	str	r2, [r3, #4]
 800114e:	609a      	str	r2, [r3, #8]
 8001150:	60da      	str	r2, [r3, #12]
 8001152:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001154:	2300      	movs	r3, #0
 8001156:	60bb      	str	r3, [r7, #8]
 8001158:	4b2a      	ldr	r3, [pc, #168]	; (8001204 <SystemClock_Config+0xd4>)
 800115a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115c:	4a29      	ldr	r2, [pc, #164]	; (8001204 <SystemClock_Config+0xd4>)
 800115e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001162:	6413      	str	r3, [r2, #64]	; 0x40
 8001164:	4b27      	ldr	r3, [pc, #156]	; (8001204 <SystemClock_Config+0xd4>)
 8001166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001168:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800116c:	60bb      	str	r3, [r7, #8]
 800116e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001170:	2300      	movs	r3, #0
 8001172:	607b      	str	r3, [r7, #4]
 8001174:	4b24      	ldr	r3, [pc, #144]	; (8001208 <SystemClock_Config+0xd8>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800117c:	4a22      	ldr	r2, [pc, #136]	; (8001208 <SystemClock_Config+0xd8>)
 800117e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001182:	6013      	str	r3, [r2, #0]
 8001184:	4b20      	ldr	r3, [pc, #128]	; (8001208 <SystemClock_Config+0xd8>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800118c:	607b      	str	r3, [r7, #4]
 800118e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001190:	230a      	movs	r3, #10
 8001192:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001194:	2301      	movs	r3, #1
 8001196:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001198:	2310      	movs	r3, #16
 800119a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800119c:	2301      	movs	r3, #1
 800119e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011a0:	2302      	movs	r3, #2
 80011a2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011a4:	2300      	movs	r3, #0
 80011a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80011a8:	2310      	movs	r3, #16
 80011aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80011ac:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80011b0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80011b2:	2304      	movs	r3, #4
 80011b4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80011b6:	2307      	movs	r3, #7
 80011b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011ba:	f107 0320 	add.w	r3, r7, #32
 80011be:	4618      	mov	r0, r3
 80011c0:	f001 f9b6 	bl	8002530 <HAL_RCC_OscConfig>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80011ca:	f000 f965 	bl	8001498 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011ce:	230f      	movs	r3, #15
 80011d0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011d2:	2302      	movs	r3, #2
 80011d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011d6:	2300      	movs	r3, #0
 80011d8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011de:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011e0:	2300      	movs	r3, #0
 80011e2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011e4:	f107 030c 	add.w	r3, r7, #12
 80011e8:	2102      	movs	r1, #2
 80011ea:	4618      	mov	r0, r3
 80011ec:	f001 fc18 	bl	8002a20 <HAL_RCC_ClockConfig>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <SystemClock_Config+0xca>
  {
    Error_Handler();
 80011f6:	f000 f94f 	bl	8001498 <Error_Handler>
  }
}
 80011fa:	bf00      	nop
 80011fc:	3750      	adds	r7, #80	; 0x50
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	40023800 	.word	0x40023800
 8001208:	40007000 	.word	0x40007000

0800120c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001212:	463b      	mov	r3, r7
 8001214:	2200      	movs	r2, #0
 8001216:	601a      	str	r2, [r3, #0]
 8001218:	605a      	str	r2, [r3, #4]
 800121a:	609a      	str	r2, [r3, #8]
 800121c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800121e:	4b21      	ldr	r3, [pc, #132]	; (80012a4 <MX_ADC1_Init+0x98>)
 8001220:	4a21      	ldr	r2, [pc, #132]	; (80012a8 <MX_ADC1_Init+0x9c>)
 8001222:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001224:	4b1f      	ldr	r3, [pc, #124]	; (80012a4 <MX_ADC1_Init+0x98>)
 8001226:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800122a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800122c:	4b1d      	ldr	r3, [pc, #116]	; (80012a4 <MX_ADC1_Init+0x98>)
 800122e:	2200      	movs	r2, #0
 8001230:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001232:	4b1c      	ldr	r3, [pc, #112]	; (80012a4 <MX_ADC1_Init+0x98>)
 8001234:	2200      	movs	r2, #0
 8001236:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001238:	4b1a      	ldr	r3, [pc, #104]	; (80012a4 <MX_ADC1_Init+0x98>)
 800123a:	2200      	movs	r2, #0
 800123c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800123e:	4b19      	ldr	r3, [pc, #100]	; (80012a4 <MX_ADC1_Init+0x98>)
 8001240:	2200      	movs	r2, #0
 8001242:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001246:	4b17      	ldr	r3, [pc, #92]	; (80012a4 <MX_ADC1_Init+0x98>)
 8001248:	2200      	movs	r2, #0
 800124a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800124c:	4b15      	ldr	r3, [pc, #84]	; (80012a4 <MX_ADC1_Init+0x98>)
 800124e:	4a17      	ldr	r2, [pc, #92]	; (80012ac <MX_ADC1_Init+0xa0>)
 8001250:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001252:	4b14      	ldr	r3, [pc, #80]	; (80012a4 <MX_ADC1_Init+0x98>)
 8001254:	2200      	movs	r2, #0
 8001256:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001258:	4b12      	ldr	r3, [pc, #72]	; (80012a4 <MX_ADC1_Init+0x98>)
 800125a:	2201      	movs	r2, #1
 800125c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800125e:	4b11      	ldr	r3, [pc, #68]	; (80012a4 <MX_ADC1_Init+0x98>)
 8001260:	2200      	movs	r2, #0
 8001262:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001266:	4b0f      	ldr	r3, [pc, #60]	; (80012a4 <MX_ADC1_Init+0x98>)
 8001268:	2201      	movs	r2, #1
 800126a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800126c:	480d      	ldr	r0, [pc, #52]	; (80012a4 <MX_ADC1_Init+0x98>)
 800126e:	f000 fab5 	bl	80017dc <HAL_ADC_Init>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001278:	f000 f90e 	bl	8001498 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800127c:	2300      	movs	r3, #0
 800127e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001280:	2301      	movs	r3, #1
 8001282:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001284:	2300      	movs	r3, #0
 8001286:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001288:	463b      	mov	r3, r7
 800128a:	4619      	mov	r1, r3
 800128c:	4805      	ldr	r0, [pc, #20]	; (80012a4 <MX_ADC1_Init+0x98>)
 800128e:	f000 fc69 	bl	8001b64 <HAL_ADC_ConfigChannel>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001298:	f000 f8fe 	bl	8001498 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800129c:	bf00      	nop
 800129e:	3710      	adds	r7, #16
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	20000064 	.word	0x20000064
 80012a8:	40012000 	.word	0x40012000
 80012ac:	0f000001 	.word	0x0f000001

080012b0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b086      	sub	sp, #24
 80012b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80012b6:	1d3b      	adds	r3, r7, #4
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]
 80012bc:	605a      	str	r2, [r3, #4]
 80012be:	609a      	str	r2, [r3, #8]
 80012c0:	60da      	str	r2, [r3, #12]
 80012c2:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80012c4:	2300      	movs	r3, #0
 80012c6:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80012c8:	4b24      	ldr	r3, [pc, #144]	; (800135c <MX_RTC_Init+0xac>)
 80012ca:	4a25      	ldr	r2, [pc, #148]	; (8001360 <MX_RTC_Init+0xb0>)
 80012cc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80012ce:	4b23      	ldr	r3, [pc, #140]	; (800135c <MX_RTC_Init+0xac>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80012d4:	4b21      	ldr	r3, [pc, #132]	; (800135c <MX_RTC_Init+0xac>)
 80012d6:	227f      	movs	r2, #127	; 0x7f
 80012d8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80012da:	4b20      	ldr	r3, [pc, #128]	; (800135c <MX_RTC_Init+0xac>)
 80012dc:	22ff      	movs	r2, #255	; 0xff
 80012de:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80012e0:	4b1e      	ldr	r3, [pc, #120]	; (800135c <MX_RTC_Init+0xac>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80012e6:	4b1d      	ldr	r3, [pc, #116]	; (800135c <MX_RTC_Init+0xac>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80012ec:	4b1b      	ldr	r3, [pc, #108]	; (800135c <MX_RTC_Init+0xac>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80012f2:	481a      	ldr	r0, [pc, #104]	; (800135c <MX_RTC_Init+0xac>)
 80012f4:	f001 fe6e 	bl	8002fd4 <HAL_RTC_Init>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80012fe:	f000 f8cb 	bl	8001498 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x9;
 8001302:	2309      	movs	r3, #9
 8001304:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x23;
 8001306:	2323      	movs	r3, #35	; 0x23
 8001308:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x10;
 800130a:	2310      	movs	r3, #16
 800130c:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800130e:	2300      	movs	r3, #0
 8001310:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001312:	2300      	movs	r3, #0
 8001314:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001316:	1d3b      	adds	r3, r7, #4
 8001318:	2201      	movs	r2, #1
 800131a:	4619      	mov	r1, r3
 800131c:	480f      	ldr	r0, [pc, #60]	; (800135c <MX_RTC_Init+0xac>)
 800131e:	f001 fecf 	bl	80030c0 <HAL_RTC_SetTime>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001328:	f000 f8b6 	bl	8001498 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 800132c:	2303      	movs	r3, #3
 800132e:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_MARCH;
 8001330:	2303      	movs	r3, #3
 8001332:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x8;
 8001334:	2308      	movs	r3, #8
 8001336:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x23;
 8001338:	2323      	movs	r3, #35	; 0x23
 800133a:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800133c:	463b      	mov	r3, r7
 800133e:	2201      	movs	r2, #1
 8001340:	4619      	mov	r1, r3
 8001342:	4806      	ldr	r0, [pc, #24]	; (800135c <MX_RTC_Init+0xac>)
 8001344:	f001 ffb4 	bl	80032b0 <HAL_RTC_SetDate>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 800134e:	f000 f8a3 	bl	8001498 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001352:	bf00      	nop
 8001354:	3718      	adds	r7, #24
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	200000ac 	.word	0x200000ac
 8001360:	40002800 	.word	0x40002800

08001364 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b08a      	sub	sp, #40	; 0x28
 8001368:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800136a:	f107 0314 	add.w	r3, r7, #20
 800136e:	2200      	movs	r2, #0
 8001370:	601a      	str	r2, [r3, #0]
 8001372:	605a      	str	r2, [r3, #4]
 8001374:	609a      	str	r2, [r3, #8]
 8001376:	60da      	str	r2, [r3, #12]
 8001378:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800137a:	2300      	movs	r3, #0
 800137c:	613b      	str	r3, [r7, #16]
 800137e:	4b43      	ldr	r3, [pc, #268]	; (800148c <MX_GPIO_Init+0x128>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001382:	4a42      	ldr	r2, [pc, #264]	; (800148c <MX_GPIO_Init+0x128>)
 8001384:	f043 0304 	orr.w	r3, r3, #4
 8001388:	6313      	str	r3, [r2, #48]	; 0x30
 800138a:	4b40      	ldr	r3, [pc, #256]	; (800148c <MX_GPIO_Init+0x128>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138e:	f003 0304 	and.w	r3, r3, #4
 8001392:	613b      	str	r3, [r7, #16]
 8001394:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001396:	2300      	movs	r3, #0
 8001398:	60fb      	str	r3, [r7, #12]
 800139a:	4b3c      	ldr	r3, [pc, #240]	; (800148c <MX_GPIO_Init+0x128>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139e:	4a3b      	ldr	r2, [pc, #236]	; (800148c <MX_GPIO_Init+0x128>)
 80013a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013a4:	6313      	str	r3, [r2, #48]	; 0x30
 80013a6:	4b39      	ldr	r3, [pc, #228]	; (800148c <MX_GPIO_Init+0x128>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013ae:	60fb      	str	r3, [r7, #12]
 80013b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b2:	2300      	movs	r3, #0
 80013b4:	60bb      	str	r3, [r7, #8]
 80013b6:	4b35      	ldr	r3, [pc, #212]	; (800148c <MX_GPIO_Init+0x128>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ba:	4a34      	ldr	r2, [pc, #208]	; (800148c <MX_GPIO_Init+0x128>)
 80013bc:	f043 0301 	orr.w	r3, r3, #1
 80013c0:	6313      	str	r3, [r2, #48]	; 0x30
 80013c2:	4b32      	ldr	r3, [pc, #200]	; (800148c <MX_GPIO_Init+0x128>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c6:	f003 0301 	and.w	r3, r3, #1
 80013ca:	60bb      	str	r3, [r7, #8]
 80013cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ce:	2300      	movs	r3, #0
 80013d0:	607b      	str	r3, [r7, #4]
 80013d2:	4b2e      	ldr	r3, [pc, #184]	; (800148c <MX_GPIO_Init+0x128>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d6:	4a2d      	ldr	r2, [pc, #180]	; (800148c <MX_GPIO_Init+0x128>)
 80013d8:	f043 0302 	orr.w	r3, r3, #2
 80013dc:	6313      	str	r3, [r2, #48]	; 0x30
 80013de:	4b2b      	ldr	r3, [pc, #172]	; (800148c <MX_GPIO_Init+0x128>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e2:	f003 0302 	and.w	r3, r3, #2
 80013e6:	607b      	str	r3, [r7, #4]
 80013e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80013ea:	2200      	movs	r2, #0
 80013ec:	217f      	movs	r1, #127	; 0x7f
 80013ee:	4828      	ldr	r0, [pc, #160]	; (8001490 <MX_GPIO_Init+0x12c>)
 80013f0:	f001 f86c 	bl	80024cc <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80013f4:	2200      	movs	r2, #0
 80013f6:	2120      	movs	r1, #32
 80013f8:	4826      	ldr	r0, [pc, #152]	; (8001494 <MX_GPIO_Init+0x130>)
 80013fa:	f001 f867 	bl	80024cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80013fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001402:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001404:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001408:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140a:	2300      	movs	r3, #0
 800140c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800140e:	f107 0314 	add.w	r3, r7, #20
 8001412:	4619      	mov	r1, r3
 8001414:	481e      	ldr	r0, [pc, #120]	; (8001490 <MX_GPIO_Init+0x12c>)
 8001416:	f000 fed5 	bl	80021c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800141a:	237f      	movs	r3, #127	; 0x7f
 800141c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800141e:	2301      	movs	r3, #1
 8001420:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001422:	2300      	movs	r3, #0
 8001424:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001426:	2300      	movs	r3, #0
 8001428:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800142a:	f107 0314 	add.w	r3, r7, #20
 800142e:	4619      	mov	r1, r3
 8001430:	4817      	ldr	r0, [pc, #92]	; (8001490 <MX_GPIO_Init+0x12c>)
 8001432:	f000 fec7 	bl	80021c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001436:	230c      	movs	r3, #12
 8001438:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800143a:	2302      	movs	r3, #2
 800143c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143e:	2300      	movs	r3, #0
 8001440:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001442:	2300      	movs	r3, #0
 8001444:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001446:	2307      	movs	r3, #7
 8001448:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800144a:	f107 0314 	add.w	r3, r7, #20
 800144e:	4619      	mov	r1, r3
 8001450:	4810      	ldr	r0, [pc, #64]	; (8001494 <MX_GPIO_Init+0x130>)
 8001452:	f000 feb7 	bl	80021c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001456:	2320      	movs	r3, #32
 8001458:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800145a:	2301      	movs	r3, #1
 800145c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145e:	2300      	movs	r3, #0
 8001460:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001462:	2300      	movs	r3, #0
 8001464:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001466:	f107 0314 	add.w	r3, r7, #20
 800146a:	4619      	mov	r1, r3
 800146c:	4809      	ldr	r0, [pc, #36]	; (8001494 <MX_GPIO_Init+0x130>)
 800146e:	f000 fea9 	bl	80021c4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001472:	2200      	movs	r2, #0
 8001474:	2100      	movs	r1, #0
 8001476:	2028      	movs	r0, #40	; 0x28
 8001478:	f000 fe6d 	bl	8002156 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800147c:	2028      	movs	r0, #40	; 0x28
 800147e:	f000 fe86 	bl	800218e <HAL_NVIC_EnableIRQ>

}
 8001482:	bf00      	nop
 8001484:	3728      	adds	r7, #40	; 0x28
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	40023800 	.word	0x40023800
 8001490:	40020800 	.word	0x40020800
 8001494:	40020000 	.word	0x40020000

08001498 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800149c:	b672      	cpsid	i
}
 800149e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014a0:	e7fe      	b.n	80014a0 <Error_Handler+0x8>
	...

080014a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014aa:	2300      	movs	r3, #0
 80014ac:	607b      	str	r3, [r7, #4]
 80014ae:	4b10      	ldr	r3, [pc, #64]	; (80014f0 <HAL_MspInit+0x4c>)
 80014b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014b2:	4a0f      	ldr	r2, [pc, #60]	; (80014f0 <HAL_MspInit+0x4c>)
 80014b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014b8:	6453      	str	r3, [r2, #68]	; 0x44
 80014ba:	4b0d      	ldr	r3, [pc, #52]	; (80014f0 <HAL_MspInit+0x4c>)
 80014bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014c2:	607b      	str	r3, [r7, #4]
 80014c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014c6:	2300      	movs	r3, #0
 80014c8:	603b      	str	r3, [r7, #0]
 80014ca:	4b09      	ldr	r3, [pc, #36]	; (80014f0 <HAL_MspInit+0x4c>)
 80014cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ce:	4a08      	ldr	r2, [pc, #32]	; (80014f0 <HAL_MspInit+0x4c>)
 80014d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014d4:	6413      	str	r3, [r2, #64]	; 0x40
 80014d6:	4b06      	ldr	r3, [pc, #24]	; (80014f0 <HAL_MspInit+0x4c>)
 80014d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014de:	603b      	str	r3, [r7, #0]
 80014e0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80014e2:	2007      	movs	r0, #7
 80014e4:	f000 fe2c 	bl	8002140 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014e8:	bf00      	nop
 80014ea:	3708      	adds	r7, #8
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	40023800 	.word	0x40023800

080014f4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b08a      	sub	sp, #40	; 0x28
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014fc:	f107 0314 	add.w	r3, r7, #20
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]
 8001504:	605a      	str	r2, [r3, #4]
 8001506:	609a      	str	r2, [r3, #8]
 8001508:	60da      	str	r2, [r3, #12]
 800150a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a17      	ldr	r2, [pc, #92]	; (8001570 <HAL_ADC_MspInit+0x7c>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d127      	bne.n	8001566 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001516:	2300      	movs	r3, #0
 8001518:	613b      	str	r3, [r7, #16]
 800151a:	4b16      	ldr	r3, [pc, #88]	; (8001574 <HAL_ADC_MspInit+0x80>)
 800151c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800151e:	4a15      	ldr	r2, [pc, #84]	; (8001574 <HAL_ADC_MspInit+0x80>)
 8001520:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001524:	6453      	str	r3, [r2, #68]	; 0x44
 8001526:	4b13      	ldr	r3, [pc, #76]	; (8001574 <HAL_ADC_MspInit+0x80>)
 8001528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800152a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800152e:	613b      	str	r3, [r7, #16]
 8001530:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001532:	2300      	movs	r3, #0
 8001534:	60fb      	str	r3, [r7, #12]
 8001536:	4b0f      	ldr	r3, [pc, #60]	; (8001574 <HAL_ADC_MspInit+0x80>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153a:	4a0e      	ldr	r2, [pc, #56]	; (8001574 <HAL_ADC_MspInit+0x80>)
 800153c:	f043 0301 	orr.w	r3, r3, #1
 8001540:	6313      	str	r3, [r2, #48]	; 0x30
 8001542:	4b0c      	ldr	r3, [pc, #48]	; (8001574 <HAL_ADC_MspInit+0x80>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001546:	f003 0301 	and.w	r3, r3, #1
 800154a:	60fb      	str	r3, [r7, #12]
 800154c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800154e:	2301      	movs	r3, #1
 8001550:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001552:	2303      	movs	r3, #3
 8001554:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001556:	2300      	movs	r3, #0
 8001558:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800155a:	f107 0314 	add.w	r3, r7, #20
 800155e:	4619      	mov	r1, r3
 8001560:	4805      	ldr	r0, [pc, #20]	; (8001578 <HAL_ADC_MspInit+0x84>)
 8001562:	f000 fe2f 	bl	80021c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001566:	bf00      	nop
 8001568:	3728      	adds	r7, #40	; 0x28
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	40012000 	.word	0x40012000
 8001574:	40023800 	.word	0x40023800
 8001578:	40020000 	.word	0x40020000

0800157c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b088      	sub	sp, #32
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001584:	f107 030c 	add.w	r3, r7, #12
 8001588:	2200      	movs	r2, #0
 800158a:	601a      	str	r2, [r3, #0]
 800158c:	605a      	str	r2, [r3, #4]
 800158e:	609a      	str	r2, [r3, #8]
 8001590:	60da      	str	r2, [r3, #12]
 8001592:	611a      	str	r2, [r3, #16]
  if(hrtc->Instance==RTC)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a0c      	ldr	r2, [pc, #48]	; (80015cc <HAL_RTC_MspInit+0x50>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d111      	bne.n	80015c2 <HAL_RTC_MspInit+0x46>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800159e:	2302      	movs	r3, #2
 80015a0:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80015a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015a6:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015a8:	f107 030c 	add.w	r3, r7, #12
 80015ac:	4618      	mov	r0, r3
 80015ae:	f001 fc23 	bl	8002df8 <HAL_RCCEx_PeriphCLKConfig>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d001      	beq.n	80015bc <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80015b8:	f7ff ff6e 	bl	8001498 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80015bc:	4b04      	ldr	r3, [pc, #16]	; (80015d0 <HAL_RTC_MspInit+0x54>)
 80015be:	2201      	movs	r2, #1
 80015c0:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80015c2:	bf00      	nop
 80015c4:	3720      	adds	r7, #32
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	40002800 	.word	0x40002800
 80015d0:	42470e3c 	.word	0x42470e3c

080015d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015d8:	e7fe      	b.n	80015d8 <NMI_Handler+0x4>

080015da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015da:	b480      	push	{r7}
 80015dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015de:	e7fe      	b.n	80015de <HardFault_Handler+0x4>

080015e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015e4:	e7fe      	b.n	80015e4 <MemManage_Handler+0x4>

080015e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015e6:	b480      	push	{r7}
 80015e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015ea:	e7fe      	b.n	80015ea <BusFault_Handler+0x4>

080015ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015f0:	e7fe      	b.n	80015f0 <UsageFault_Handler+0x4>

080015f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015f2:	b480      	push	{r7}
 80015f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015f6:	bf00      	nop
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr

08001600 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001604:	bf00      	nop
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr

0800160e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800160e:	b480      	push	{r7}
 8001610:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001612:	bf00      	nop
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr

0800161c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001620:	f000 f898 	bl	8001754 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001624:	bf00      	nop
 8001626:	bd80      	pop	{r7, pc}

08001628 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800162c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001630:	f000 ff66 	bl	8002500 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001634:	bf00      	nop
 8001636:	bd80      	pop	{r7, pc}

08001638 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800163c:	4b06      	ldr	r3, [pc, #24]	; (8001658 <SystemInit+0x20>)
 800163e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001642:	4a05      	ldr	r2, [pc, #20]	; (8001658 <SystemInit+0x20>)
 8001644:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001648:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800164c:	bf00      	nop
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	e000ed00 	.word	0xe000ed00

0800165c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800165c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001694 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001660:	480d      	ldr	r0, [pc, #52]	; (8001698 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001662:	490e      	ldr	r1, [pc, #56]	; (800169c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001664:	4a0e      	ldr	r2, [pc, #56]	; (80016a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001666:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001668:	e002      	b.n	8001670 <LoopCopyDataInit>

0800166a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800166a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800166c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800166e:	3304      	adds	r3, #4

08001670 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001670:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001672:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001674:	d3f9      	bcc.n	800166a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001676:	4a0b      	ldr	r2, [pc, #44]	; (80016a4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001678:	4c0b      	ldr	r4, [pc, #44]	; (80016a8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800167a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800167c:	e001      	b.n	8001682 <LoopFillZerobss>

0800167e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800167e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001680:	3204      	adds	r2, #4

08001682 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001682:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001684:	d3fb      	bcc.n	800167e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001686:	f7ff ffd7 	bl	8001638 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800168a:	f001 ffa1 	bl	80035d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800168e:	f7ff fb1b 	bl	8000cc8 <main>
  bx  lr    
 8001692:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001694:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001698:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800169c:	20000048 	.word	0x20000048
  ldr r2, =_sidata
 80016a0:	08003660 	.word	0x08003660
  ldr r2, =_sbss
 80016a4:	20000048 	.word	0x20000048
  ldr r4, =_ebss
 80016a8:	20000108 	.word	0x20000108

080016ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016ac:	e7fe      	b.n	80016ac <ADC_IRQHandler>
	...

080016b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016b4:	4b0e      	ldr	r3, [pc, #56]	; (80016f0 <HAL_Init+0x40>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a0d      	ldr	r2, [pc, #52]	; (80016f0 <HAL_Init+0x40>)
 80016ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016c0:	4b0b      	ldr	r3, [pc, #44]	; (80016f0 <HAL_Init+0x40>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a0a      	ldr	r2, [pc, #40]	; (80016f0 <HAL_Init+0x40>)
 80016c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016cc:	4b08      	ldr	r3, [pc, #32]	; (80016f0 <HAL_Init+0x40>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a07      	ldr	r2, [pc, #28]	; (80016f0 <HAL_Init+0x40>)
 80016d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016d8:	2003      	movs	r0, #3
 80016da:	f000 fd31 	bl	8002140 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016de:	2000      	movs	r0, #0
 80016e0:	f000 f808 	bl	80016f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016e4:	f7ff fede 	bl	80014a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016e8:	2300      	movs	r3, #0
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	40023c00 	.word	0x40023c00

080016f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016fc:	4b12      	ldr	r3, [pc, #72]	; (8001748 <HAL_InitTick+0x54>)
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	4b12      	ldr	r3, [pc, #72]	; (800174c <HAL_InitTick+0x58>)
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	4619      	mov	r1, r3
 8001706:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800170a:	fbb3 f3f1 	udiv	r3, r3, r1
 800170e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001712:	4618      	mov	r0, r3
 8001714:	f000 fd49 	bl	80021aa <HAL_SYSTICK_Config>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e00e      	b.n	8001740 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2b0f      	cmp	r3, #15
 8001726:	d80a      	bhi.n	800173e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001728:	2200      	movs	r2, #0
 800172a:	6879      	ldr	r1, [r7, #4]
 800172c:	f04f 30ff 	mov.w	r0, #4294967295
 8001730:	f000 fd11 	bl	8002156 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001734:	4a06      	ldr	r2, [pc, #24]	; (8001750 <HAL_InitTick+0x5c>)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800173a:	2300      	movs	r3, #0
 800173c:	e000      	b.n	8001740 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
}
 8001740:	4618      	mov	r0, r3
 8001742:	3708      	adds	r7, #8
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	2000003c 	.word	0x2000003c
 800174c:	20000044 	.word	0x20000044
 8001750:	20000040 	.word	0x20000040

08001754 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001758:	4b06      	ldr	r3, [pc, #24]	; (8001774 <HAL_IncTick+0x20>)
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	461a      	mov	r2, r3
 800175e:	4b06      	ldr	r3, [pc, #24]	; (8001778 <HAL_IncTick+0x24>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4413      	add	r3, r2
 8001764:	4a04      	ldr	r2, [pc, #16]	; (8001778 <HAL_IncTick+0x24>)
 8001766:	6013      	str	r3, [r2, #0]
}
 8001768:	bf00      	nop
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	20000044 	.word	0x20000044
 8001778:	20000104 	.word	0x20000104

0800177c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  return uwTick;
 8001780:	4b03      	ldr	r3, [pc, #12]	; (8001790 <HAL_GetTick+0x14>)
 8001782:	681b      	ldr	r3, [r3, #0]
}
 8001784:	4618      	mov	r0, r3
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	20000104 	.word	0x20000104

08001794 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800179c:	f7ff ffee 	bl	800177c <HAL_GetTick>
 80017a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017ac:	d005      	beq.n	80017ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017ae:	4b0a      	ldr	r3, [pc, #40]	; (80017d8 <HAL_Delay+0x44>)
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	461a      	mov	r2, r3
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	4413      	add	r3, r2
 80017b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80017ba:	bf00      	nop
 80017bc:	f7ff ffde 	bl	800177c <HAL_GetTick>
 80017c0:	4602      	mov	r2, r0
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	68fa      	ldr	r2, [r7, #12]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d8f7      	bhi.n	80017bc <HAL_Delay+0x28>
  {
  }
}
 80017cc:	bf00      	nop
 80017ce:	bf00      	nop
 80017d0:	3710      	adds	r7, #16
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	20000044 	.word	0x20000044

080017dc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b084      	sub	sp, #16
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017e4:	2300      	movs	r3, #0
 80017e6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d101      	bne.n	80017f2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e033      	b.n	800185a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d109      	bne.n	800180e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80017fa:	6878      	ldr	r0, [r7, #4]
 80017fc:	f7ff fe7a 	bl	80014f4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2200      	movs	r2, #0
 8001804:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2200      	movs	r2, #0
 800180a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001812:	f003 0310 	and.w	r3, r3, #16
 8001816:	2b00      	cmp	r3, #0
 8001818:	d118      	bne.n	800184c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001822:	f023 0302 	bic.w	r3, r3, #2
 8001826:	f043 0202 	orr.w	r2, r3, #2
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	f000 faba 	bl	8001da8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2200      	movs	r2, #0
 8001838:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183e:	f023 0303 	bic.w	r3, r3, #3
 8001842:	f043 0201 	orr.w	r2, r3, #1
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	641a      	str	r2, [r3, #64]	; 0x40
 800184a:	e001      	b.n	8001850 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2200      	movs	r2, #0
 8001854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001858:	7bfb      	ldrb	r3, [r7, #15]
}
 800185a:	4618      	mov	r0, r3
 800185c:	3710      	adds	r7, #16
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
	...

08001864 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001864:	b480      	push	{r7}
 8001866:	b085      	sub	sp, #20
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800186c:	2300      	movs	r3, #0
 800186e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001876:	2b01      	cmp	r3, #1
 8001878:	d101      	bne.n	800187e <HAL_ADC_Start+0x1a>
 800187a:	2302      	movs	r3, #2
 800187c:	e097      	b.n	80019ae <HAL_ADC_Start+0x14a>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2201      	movs	r2, #1
 8001882:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	f003 0301 	and.w	r3, r3, #1
 8001890:	2b01      	cmp	r3, #1
 8001892:	d018      	beq.n	80018c6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	689a      	ldr	r2, [r3, #8]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f042 0201 	orr.w	r2, r2, #1
 80018a2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80018a4:	4b45      	ldr	r3, [pc, #276]	; (80019bc <HAL_ADC_Start+0x158>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a45      	ldr	r2, [pc, #276]	; (80019c0 <HAL_ADC_Start+0x15c>)
 80018aa:	fba2 2303 	umull	r2, r3, r2, r3
 80018ae:	0c9a      	lsrs	r2, r3, #18
 80018b0:	4613      	mov	r3, r2
 80018b2:	005b      	lsls	r3, r3, #1
 80018b4:	4413      	add	r3, r2
 80018b6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80018b8:	e002      	b.n	80018c0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	3b01      	subs	r3, #1
 80018be:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d1f9      	bne.n	80018ba <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	f003 0301 	and.w	r3, r3, #1
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d15f      	bne.n	8001994 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80018dc:	f023 0301 	bic.w	r3, r3, #1
 80018e0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d007      	beq.n	8001906 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80018fe:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800190e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001912:	d106      	bne.n	8001922 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001918:	f023 0206 	bic.w	r2, r3, #6
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	645a      	str	r2, [r3, #68]	; 0x44
 8001920:	e002      	b.n	8001928 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2200      	movs	r2, #0
 8001926:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2200      	movs	r2, #0
 800192c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001930:	4b24      	ldr	r3, [pc, #144]	; (80019c4 <HAL_ADC_Start+0x160>)
 8001932:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800193c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	f003 031f 	and.w	r3, r3, #31
 8001946:	2b00      	cmp	r3, #0
 8001948:	d10f      	bne.n	800196a <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001954:	2b00      	cmp	r3, #0
 8001956:	d129      	bne.n	80019ac <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	689a      	ldr	r2, [r3, #8]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001966:	609a      	str	r2, [r3, #8]
 8001968:	e020      	b.n	80019ac <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a16      	ldr	r2, [pc, #88]	; (80019c8 <HAL_ADC_Start+0x164>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d11b      	bne.n	80019ac <HAL_ADC_Start+0x148>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800197e:	2b00      	cmp	r3, #0
 8001980:	d114      	bne.n	80019ac <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	689a      	ldr	r2, [r3, #8]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001990:	609a      	str	r2, [r3, #8]
 8001992:	e00b      	b.n	80019ac <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001998:	f043 0210 	orr.w	r2, r3, #16
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a4:	f043 0201 	orr.w	r2, r3, #1
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80019ac:	2300      	movs	r3, #0
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3714      	adds	r7, #20
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	2000003c 	.word	0x2000003c
 80019c0:	431bde83 	.word	0x431bde83
 80019c4:	40012300 	.word	0x40012300
 80019c8:	40012000 	.word	0x40012000

080019cc <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d101      	bne.n	80019e2 <HAL_ADC_Stop+0x16>
 80019de:	2302      	movs	r3, #2
 80019e0:	e021      	b.n	8001a26 <HAL_ADC_Stop+0x5a>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2201      	movs	r2, #1
 80019e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	689a      	ldr	r2, [r3, #8]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f022 0201 	bic.w	r2, r2, #1
 80019f8:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	f003 0301 	and.w	r3, r3, #1
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d109      	bne.n	8001a1c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001a10:	f023 0301 	bic.w	r3, r3, #1
 8001a14:	f043 0201 	orr.w	r2, r3, #1
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2200      	movs	r2, #0
 8001a20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001a24:	2300      	movs	r3, #0
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	370c      	adds	r7, #12
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr

08001a32 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001a32:	b580      	push	{r7, lr}
 8001a34:	b084      	sub	sp, #16
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	6078      	str	r0, [r7, #4]
 8001a3a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a4e:	d113      	bne.n	8001a78 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001a5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a5e:	d10b      	bne.n	8001a78 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a64:	f043 0220 	orr.w	r2, r3, #32
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2200      	movs	r2, #0
 8001a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	e063      	b.n	8001b40 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001a78:	f7ff fe80 	bl	800177c <HAL_GetTick>
 8001a7c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001a7e:	e021      	b.n	8001ac4 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a86:	d01d      	beq.n	8001ac4 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d007      	beq.n	8001a9e <HAL_ADC_PollForConversion+0x6c>
 8001a8e:	f7ff fe75 	bl	800177c <HAL_GetTick>
 8001a92:	4602      	mov	r2, r0
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	1ad3      	subs	r3, r2, r3
 8001a98:	683a      	ldr	r2, [r7, #0]
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	d212      	bcs.n	8001ac4 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 0302 	and.w	r3, r3, #2
 8001aa8:	2b02      	cmp	r3, #2
 8001aaa:	d00b      	beq.n	8001ac4 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab0:	f043 0204 	orr.w	r2, r3, #4
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2200      	movs	r2, #0
 8001abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001ac0:	2303      	movs	r3, #3
 8001ac2:	e03d      	b.n	8001b40 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 0302 	and.w	r3, r3, #2
 8001ace:	2b02      	cmp	r3, #2
 8001ad0:	d1d6      	bne.n	8001a80 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f06f 0212 	mvn.w	r2, #18
 8001ada:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d123      	bne.n	8001b3e <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d11f      	bne.n	8001b3e <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b04:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d006      	beq.n	8001b1a <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d111      	bne.n	8001b3e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d105      	bne.n	8001b3e <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b36:	f043 0201 	orr.w	r2, r3, #1
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001b3e:	2300      	movs	r3, #0
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3710      	adds	r7, #16
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}

08001b48 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	370c      	adds	r7, #12
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
	...

08001b64 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b085      	sub	sp, #20
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d101      	bne.n	8001b80 <HAL_ADC_ConfigChannel+0x1c>
 8001b7c:	2302      	movs	r3, #2
 8001b7e:	e105      	b.n	8001d8c <HAL_ADC_ConfigChannel+0x228>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2201      	movs	r2, #1
 8001b84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	2b09      	cmp	r3, #9
 8001b8e:	d925      	bls.n	8001bdc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	68d9      	ldr	r1, [r3, #12]
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	b29b      	uxth	r3, r3
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	4613      	mov	r3, r2
 8001ba0:	005b      	lsls	r3, r3, #1
 8001ba2:	4413      	add	r3, r2
 8001ba4:	3b1e      	subs	r3, #30
 8001ba6:	2207      	movs	r2, #7
 8001ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bac:	43da      	mvns	r2, r3
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	400a      	ands	r2, r1
 8001bb4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	68d9      	ldr	r1, [r3, #12]
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	689a      	ldr	r2, [r3, #8]
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	b29b      	uxth	r3, r3
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	4603      	mov	r3, r0
 8001bca:	005b      	lsls	r3, r3, #1
 8001bcc:	4403      	add	r3, r0
 8001bce:	3b1e      	subs	r3, #30
 8001bd0:	409a      	lsls	r2, r3
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	430a      	orrs	r2, r1
 8001bd8:	60da      	str	r2, [r3, #12]
 8001bda:	e022      	b.n	8001c22 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	6919      	ldr	r1, [r3, #16]
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	b29b      	uxth	r3, r3
 8001be8:	461a      	mov	r2, r3
 8001bea:	4613      	mov	r3, r2
 8001bec:	005b      	lsls	r3, r3, #1
 8001bee:	4413      	add	r3, r2
 8001bf0:	2207      	movs	r2, #7
 8001bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf6:	43da      	mvns	r2, r3
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	400a      	ands	r2, r1
 8001bfe:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	6919      	ldr	r1, [r3, #16]
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	689a      	ldr	r2, [r3, #8]
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	b29b      	uxth	r3, r3
 8001c10:	4618      	mov	r0, r3
 8001c12:	4603      	mov	r3, r0
 8001c14:	005b      	lsls	r3, r3, #1
 8001c16:	4403      	add	r3, r0
 8001c18:	409a      	lsls	r2, r3
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	430a      	orrs	r2, r1
 8001c20:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	2b06      	cmp	r3, #6
 8001c28:	d824      	bhi.n	8001c74 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	685a      	ldr	r2, [r3, #4]
 8001c34:	4613      	mov	r3, r2
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	4413      	add	r3, r2
 8001c3a:	3b05      	subs	r3, #5
 8001c3c:	221f      	movs	r2, #31
 8001c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c42:	43da      	mvns	r2, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	400a      	ands	r2, r1
 8001c4a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	b29b      	uxth	r3, r3
 8001c58:	4618      	mov	r0, r3
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	685a      	ldr	r2, [r3, #4]
 8001c5e:	4613      	mov	r3, r2
 8001c60:	009b      	lsls	r3, r3, #2
 8001c62:	4413      	add	r3, r2
 8001c64:	3b05      	subs	r3, #5
 8001c66:	fa00 f203 	lsl.w	r2, r0, r3
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	430a      	orrs	r2, r1
 8001c70:	635a      	str	r2, [r3, #52]	; 0x34
 8001c72:	e04c      	b.n	8001d0e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	2b0c      	cmp	r3, #12
 8001c7a:	d824      	bhi.n	8001cc6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	685a      	ldr	r2, [r3, #4]
 8001c86:	4613      	mov	r3, r2
 8001c88:	009b      	lsls	r3, r3, #2
 8001c8a:	4413      	add	r3, r2
 8001c8c:	3b23      	subs	r3, #35	; 0x23
 8001c8e:	221f      	movs	r2, #31
 8001c90:	fa02 f303 	lsl.w	r3, r2, r3
 8001c94:	43da      	mvns	r2, r3
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	400a      	ands	r2, r1
 8001c9c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	b29b      	uxth	r3, r3
 8001caa:	4618      	mov	r0, r3
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	685a      	ldr	r2, [r3, #4]
 8001cb0:	4613      	mov	r3, r2
 8001cb2:	009b      	lsls	r3, r3, #2
 8001cb4:	4413      	add	r3, r2
 8001cb6:	3b23      	subs	r3, #35	; 0x23
 8001cb8:	fa00 f203 	lsl.w	r2, r0, r3
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	430a      	orrs	r2, r1
 8001cc2:	631a      	str	r2, [r3, #48]	; 0x30
 8001cc4:	e023      	b.n	8001d0e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	685a      	ldr	r2, [r3, #4]
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	4413      	add	r3, r2
 8001cd6:	3b41      	subs	r3, #65	; 0x41
 8001cd8:	221f      	movs	r2, #31
 8001cda:	fa02 f303 	lsl.w	r3, r2, r3
 8001cde:	43da      	mvns	r2, r3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	400a      	ands	r2, r1
 8001ce6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	b29b      	uxth	r3, r3
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	685a      	ldr	r2, [r3, #4]
 8001cfa:	4613      	mov	r3, r2
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	4413      	add	r3, r2
 8001d00:	3b41      	subs	r3, #65	; 0x41
 8001d02:	fa00 f203 	lsl.w	r2, r0, r3
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	430a      	orrs	r2, r1
 8001d0c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d0e:	4b22      	ldr	r3, [pc, #136]	; (8001d98 <HAL_ADC_ConfigChannel+0x234>)
 8001d10:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a21      	ldr	r2, [pc, #132]	; (8001d9c <HAL_ADC_ConfigChannel+0x238>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d109      	bne.n	8001d30 <HAL_ADC_ConfigChannel+0x1cc>
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	2b12      	cmp	r3, #18
 8001d22:	d105      	bne.n	8001d30 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a19      	ldr	r2, [pc, #100]	; (8001d9c <HAL_ADC_ConfigChannel+0x238>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d123      	bne.n	8001d82 <HAL_ADC_ConfigChannel+0x21e>
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	2b10      	cmp	r3, #16
 8001d40:	d003      	beq.n	8001d4a <HAL_ADC_ConfigChannel+0x1e6>
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	2b11      	cmp	r3, #17
 8001d48:	d11b      	bne.n	8001d82 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	2b10      	cmp	r3, #16
 8001d5c:	d111      	bne.n	8001d82 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d5e:	4b10      	ldr	r3, [pc, #64]	; (8001da0 <HAL_ADC_ConfigChannel+0x23c>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a10      	ldr	r2, [pc, #64]	; (8001da4 <HAL_ADC_ConfigChannel+0x240>)
 8001d64:	fba2 2303 	umull	r2, r3, r2, r3
 8001d68:	0c9a      	lsrs	r2, r3, #18
 8001d6a:	4613      	mov	r3, r2
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	4413      	add	r3, r2
 8001d70:	005b      	lsls	r3, r3, #1
 8001d72:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001d74:	e002      	b.n	8001d7c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	3b01      	subs	r3, #1
 8001d7a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d1f9      	bne.n	8001d76 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2200      	movs	r2, #0
 8001d86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001d8a:	2300      	movs	r3, #0
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3714      	adds	r7, #20
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr
 8001d98:	40012300 	.word	0x40012300
 8001d9c:	40012000 	.word	0x40012000
 8001da0:	2000003c 	.word	0x2000003c
 8001da4:	431bde83 	.word	0x431bde83

08001da8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b085      	sub	sp, #20
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001db0:	4b79      	ldr	r3, [pc, #484]	; (8001f98 <ADC_Init+0x1f0>)
 8001db2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	685a      	ldr	r2, [r3, #4]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	431a      	orrs	r2, r3
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	685a      	ldr	r2, [r3, #4]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ddc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	6859      	ldr	r1, [r3, #4]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	691b      	ldr	r3, [r3, #16]
 8001de8:	021a      	lsls	r2, r3, #8
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	430a      	orrs	r2, r1
 8001df0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	685a      	ldr	r2, [r3, #4]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001e00:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	6859      	ldr	r1, [r3, #4]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	689a      	ldr	r2, [r3, #8]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	430a      	orrs	r2, r1
 8001e12:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	689a      	ldr	r2, [r3, #8]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e22:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	6899      	ldr	r1, [r3, #8]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	68da      	ldr	r2, [r3, #12]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	430a      	orrs	r2, r1
 8001e34:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e3a:	4a58      	ldr	r2, [pc, #352]	; (8001f9c <ADC_Init+0x1f4>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d022      	beq.n	8001e86 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	689a      	ldr	r2, [r3, #8]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e4e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	6899      	ldr	r1, [r3, #8]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	430a      	orrs	r2, r1
 8001e60:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	689a      	ldr	r2, [r3, #8]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001e70:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	6899      	ldr	r1, [r3, #8]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	430a      	orrs	r2, r1
 8001e82:	609a      	str	r2, [r3, #8]
 8001e84:	e00f      	b.n	8001ea6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	689a      	ldr	r2, [r3, #8]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e94:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	689a      	ldr	r2, [r3, #8]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001ea4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	689a      	ldr	r2, [r3, #8]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f022 0202 	bic.w	r2, r2, #2
 8001eb4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	6899      	ldr	r1, [r3, #8]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	7e1b      	ldrb	r3, [r3, #24]
 8001ec0:	005a      	lsls	r2, r3, #1
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	430a      	orrs	r2, r1
 8001ec8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d01b      	beq.n	8001f0c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	685a      	ldr	r2, [r3, #4]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ee2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	685a      	ldr	r2, [r3, #4]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001ef2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	6859      	ldr	r1, [r3, #4]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001efe:	3b01      	subs	r3, #1
 8001f00:	035a      	lsls	r2, r3, #13
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	430a      	orrs	r2, r1
 8001f08:	605a      	str	r2, [r3, #4]
 8001f0a:	e007      	b.n	8001f1c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	685a      	ldr	r2, [r3, #4]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f1a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001f2a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	69db      	ldr	r3, [r3, #28]
 8001f36:	3b01      	subs	r3, #1
 8001f38:	051a      	lsls	r2, r3, #20
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	430a      	orrs	r2, r1
 8001f40:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	689a      	ldr	r2, [r3, #8]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001f50:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	6899      	ldr	r1, [r3, #8]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001f5e:	025a      	lsls	r2, r3, #9
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	430a      	orrs	r2, r1
 8001f66:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	689a      	ldr	r2, [r3, #8]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f76:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	6899      	ldr	r1, [r3, #8]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	695b      	ldr	r3, [r3, #20]
 8001f82:	029a      	lsls	r2, r3, #10
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	430a      	orrs	r2, r1
 8001f8a:	609a      	str	r2, [r3, #8]
}
 8001f8c:	bf00      	nop
 8001f8e:	3714      	adds	r7, #20
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr
 8001f98:	40012300 	.word	0x40012300
 8001f9c:	0f000001 	.word	0x0f000001

08001fa0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b085      	sub	sp, #20
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	f003 0307 	and.w	r3, r3, #7
 8001fae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fb0:	4b0c      	ldr	r3, [pc, #48]	; (8001fe4 <__NVIC_SetPriorityGrouping+0x44>)
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fb6:	68ba      	ldr	r2, [r7, #8]
 8001fb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fd2:	4a04      	ldr	r2, [pc, #16]	; (8001fe4 <__NVIC_SetPriorityGrouping+0x44>)
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	60d3      	str	r3, [r2, #12]
}
 8001fd8:	bf00      	nop
 8001fda:	3714      	adds	r7, #20
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr
 8001fe4:	e000ed00 	.word	0xe000ed00

08001fe8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fec:	4b04      	ldr	r3, [pc, #16]	; (8002000 <__NVIC_GetPriorityGrouping+0x18>)
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	0a1b      	lsrs	r3, r3, #8
 8001ff2:	f003 0307 	and.w	r3, r3, #7
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr
 8002000:	e000ed00 	.word	0xe000ed00

08002004 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	4603      	mov	r3, r0
 800200c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800200e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002012:	2b00      	cmp	r3, #0
 8002014:	db0b      	blt.n	800202e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002016:	79fb      	ldrb	r3, [r7, #7]
 8002018:	f003 021f 	and.w	r2, r3, #31
 800201c:	4907      	ldr	r1, [pc, #28]	; (800203c <__NVIC_EnableIRQ+0x38>)
 800201e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002022:	095b      	lsrs	r3, r3, #5
 8002024:	2001      	movs	r0, #1
 8002026:	fa00 f202 	lsl.w	r2, r0, r2
 800202a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800202e:	bf00      	nop
 8002030:	370c      	adds	r7, #12
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	e000e100 	.word	0xe000e100

08002040 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	4603      	mov	r3, r0
 8002048:	6039      	str	r1, [r7, #0]
 800204a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800204c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002050:	2b00      	cmp	r3, #0
 8002052:	db0a      	blt.n	800206a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	b2da      	uxtb	r2, r3
 8002058:	490c      	ldr	r1, [pc, #48]	; (800208c <__NVIC_SetPriority+0x4c>)
 800205a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800205e:	0112      	lsls	r2, r2, #4
 8002060:	b2d2      	uxtb	r2, r2
 8002062:	440b      	add	r3, r1
 8002064:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002068:	e00a      	b.n	8002080 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	b2da      	uxtb	r2, r3
 800206e:	4908      	ldr	r1, [pc, #32]	; (8002090 <__NVIC_SetPriority+0x50>)
 8002070:	79fb      	ldrb	r3, [r7, #7]
 8002072:	f003 030f 	and.w	r3, r3, #15
 8002076:	3b04      	subs	r3, #4
 8002078:	0112      	lsls	r2, r2, #4
 800207a:	b2d2      	uxtb	r2, r2
 800207c:	440b      	add	r3, r1
 800207e:	761a      	strb	r2, [r3, #24]
}
 8002080:	bf00      	nop
 8002082:	370c      	adds	r7, #12
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr
 800208c:	e000e100 	.word	0xe000e100
 8002090:	e000ed00 	.word	0xe000ed00

08002094 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002094:	b480      	push	{r7}
 8002096:	b089      	sub	sp, #36	; 0x24
 8002098:	af00      	add	r7, sp, #0
 800209a:	60f8      	str	r0, [r7, #12]
 800209c:	60b9      	str	r1, [r7, #8]
 800209e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	f003 0307 	and.w	r3, r3, #7
 80020a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020a8:	69fb      	ldr	r3, [r7, #28]
 80020aa:	f1c3 0307 	rsb	r3, r3, #7
 80020ae:	2b04      	cmp	r3, #4
 80020b0:	bf28      	it	cs
 80020b2:	2304      	movcs	r3, #4
 80020b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	3304      	adds	r3, #4
 80020ba:	2b06      	cmp	r3, #6
 80020bc:	d902      	bls.n	80020c4 <NVIC_EncodePriority+0x30>
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	3b03      	subs	r3, #3
 80020c2:	e000      	b.n	80020c6 <NVIC_EncodePriority+0x32>
 80020c4:	2300      	movs	r3, #0
 80020c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020c8:	f04f 32ff 	mov.w	r2, #4294967295
 80020cc:	69bb      	ldr	r3, [r7, #24]
 80020ce:	fa02 f303 	lsl.w	r3, r2, r3
 80020d2:	43da      	mvns	r2, r3
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	401a      	ands	r2, r3
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020dc:	f04f 31ff 	mov.w	r1, #4294967295
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	fa01 f303 	lsl.w	r3, r1, r3
 80020e6:	43d9      	mvns	r1, r3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020ec:	4313      	orrs	r3, r2
         );
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3724      	adds	r7, #36	; 0x24
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
	...

080020fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	3b01      	subs	r3, #1
 8002108:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800210c:	d301      	bcc.n	8002112 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800210e:	2301      	movs	r3, #1
 8002110:	e00f      	b.n	8002132 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002112:	4a0a      	ldr	r2, [pc, #40]	; (800213c <SysTick_Config+0x40>)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	3b01      	subs	r3, #1
 8002118:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800211a:	210f      	movs	r1, #15
 800211c:	f04f 30ff 	mov.w	r0, #4294967295
 8002120:	f7ff ff8e 	bl	8002040 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002124:	4b05      	ldr	r3, [pc, #20]	; (800213c <SysTick_Config+0x40>)
 8002126:	2200      	movs	r2, #0
 8002128:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800212a:	4b04      	ldr	r3, [pc, #16]	; (800213c <SysTick_Config+0x40>)
 800212c:	2207      	movs	r2, #7
 800212e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002130:	2300      	movs	r3, #0
}
 8002132:	4618      	mov	r0, r3
 8002134:	3708      	adds	r7, #8
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	e000e010 	.word	0xe000e010

08002140 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	f7ff ff29 	bl	8001fa0 <__NVIC_SetPriorityGrouping>
}
 800214e:	bf00      	nop
 8002150:	3708      	adds	r7, #8
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}

08002156 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002156:	b580      	push	{r7, lr}
 8002158:	b086      	sub	sp, #24
 800215a:	af00      	add	r7, sp, #0
 800215c:	4603      	mov	r3, r0
 800215e:	60b9      	str	r1, [r7, #8]
 8002160:	607a      	str	r2, [r7, #4]
 8002162:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002164:	2300      	movs	r3, #0
 8002166:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002168:	f7ff ff3e 	bl	8001fe8 <__NVIC_GetPriorityGrouping>
 800216c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800216e:	687a      	ldr	r2, [r7, #4]
 8002170:	68b9      	ldr	r1, [r7, #8]
 8002172:	6978      	ldr	r0, [r7, #20]
 8002174:	f7ff ff8e 	bl	8002094 <NVIC_EncodePriority>
 8002178:	4602      	mov	r2, r0
 800217a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800217e:	4611      	mov	r1, r2
 8002180:	4618      	mov	r0, r3
 8002182:	f7ff ff5d 	bl	8002040 <__NVIC_SetPriority>
}
 8002186:	bf00      	nop
 8002188:	3718      	adds	r7, #24
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}

0800218e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800218e:	b580      	push	{r7, lr}
 8002190:	b082      	sub	sp, #8
 8002192:	af00      	add	r7, sp, #0
 8002194:	4603      	mov	r3, r0
 8002196:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002198:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800219c:	4618      	mov	r0, r3
 800219e:	f7ff ff31 	bl	8002004 <__NVIC_EnableIRQ>
}
 80021a2:	bf00      	nop
 80021a4:	3708      	adds	r7, #8
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}

080021aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021aa:	b580      	push	{r7, lr}
 80021ac:	b082      	sub	sp, #8
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f7ff ffa2 	bl	80020fc <SysTick_Config>
 80021b8:	4603      	mov	r3, r0
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3708      	adds	r7, #8
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
	...

080021c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b089      	sub	sp, #36	; 0x24
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021ce:	2300      	movs	r3, #0
 80021d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021d2:	2300      	movs	r3, #0
 80021d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021d6:	2300      	movs	r3, #0
 80021d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021da:	2300      	movs	r3, #0
 80021dc:	61fb      	str	r3, [r7, #28]
 80021de:	e159      	b.n	8002494 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021e0:	2201      	movs	r2, #1
 80021e2:	69fb      	ldr	r3, [r7, #28]
 80021e4:	fa02 f303 	lsl.w	r3, r2, r3
 80021e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	697a      	ldr	r2, [r7, #20]
 80021f0:	4013      	ands	r3, r2
 80021f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021f4:	693a      	ldr	r2, [r7, #16]
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	429a      	cmp	r2, r3
 80021fa:	f040 8148 	bne.w	800248e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	f003 0303 	and.w	r3, r3, #3
 8002206:	2b01      	cmp	r3, #1
 8002208:	d005      	beq.n	8002216 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002212:	2b02      	cmp	r3, #2
 8002214:	d130      	bne.n	8002278 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	005b      	lsls	r3, r3, #1
 8002220:	2203      	movs	r2, #3
 8002222:	fa02 f303 	lsl.w	r3, r2, r3
 8002226:	43db      	mvns	r3, r3
 8002228:	69ba      	ldr	r2, [r7, #24]
 800222a:	4013      	ands	r3, r2
 800222c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	68da      	ldr	r2, [r3, #12]
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	005b      	lsls	r3, r3, #1
 8002236:	fa02 f303 	lsl.w	r3, r2, r3
 800223a:	69ba      	ldr	r2, [r7, #24]
 800223c:	4313      	orrs	r3, r2
 800223e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	69ba      	ldr	r2, [r7, #24]
 8002244:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800224c:	2201      	movs	r2, #1
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	fa02 f303 	lsl.w	r3, r2, r3
 8002254:	43db      	mvns	r3, r3
 8002256:	69ba      	ldr	r2, [r7, #24]
 8002258:	4013      	ands	r3, r2
 800225a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	091b      	lsrs	r3, r3, #4
 8002262:	f003 0201 	and.w	r2, r3, #1
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	fa02 f303 	lsl.w	r3, r2, r3
 800226c:	69ba      	ldr	r2, [r7, #24]
 800226e:	4313      	orrs	r3, r2
 8002270:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	69ba      	ldr	r2, [r7, #24]
 8002276:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f003 0303 	and.w	r3, r3, #3
 8002280:	2b03      	cmp	r3, #3
 8002282:	d017      	beq.n	80022b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	005b      	lsls	r3, r3, #1
 800228e:	2203      	movs	r2, #3
 8002290:	fa02 f303 	lsl.w	r3, r2, r3
 8002294:	43db      	mvns	r3, r3
 8002296:	69ba      	ldr	r2, [r7, #24]
 8002298:	4013      	ands	r3, r2
 800229a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	689a      	ldr	r2, [r3, #8]
 80022a0:	69fb      	ldr	r3, [r7, #28]
 80022a2:	005b      	lsls	r3, r3, #1
 80022a4:	fa02 f303 	lsl.w	r3, r2, r3
 80022a8:	69ba      	ldr	r2, [r7, #24]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	69ba      	ldr	r2, [r7, #24]
 80022b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f003 0303 	and.w	r3, r3, #3
 80022bc:	2b02      	cmp	r3, #2
 80022be:	d123      	bne.n	8002308 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	08da      	lsrs	r2, r3, #3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	3208      	adds	r2, #8
 80022c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	f003 0307 	and.w	r3, r3, #7
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	220f      	movs	r2, #15
 80022d8:	fa02 f303 	lsl.w	r3, r2, r3
 80022dc:	43db      	mvns	r3, r3
 80022de:	69ba      	ldr	r2, [r7, #24]
 80022e0:	4013      	ands	r3, r2
 80022e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	691a      	ldr	r2, [r3, #16]
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	f003 0307 	and.w	r3, r3, #7
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	fa02 f303 	lsl.w	r3, r2, r3
 80022f4:	69ba      	ldr	r2, [r7, #24]
 80022f6:	4313      	orrs	r3, r2
 80022f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	08da      	lsrs	r2, r3, #3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	3208      	adds	r2, #8
 8002302:	69b9      	ldr	r1, [r7, #24]
 8002304:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	005b      	lsls	r3, r3, #1
 8002312:	2203      	movs	r2, #3
 8002314:	fa02 f303 	lsl.w	r3, r2, r3
 8002318:	43db      	mvns	r3, r3
 800231a:	69ba      	ldr	r2, [r7, #24]
 800231c:	4013      	ands	r3, r2
 800231e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f003 0203 	and.w	r2, r3, #3
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	005b      	lsls	r3, r3, #1
 800232c:	fa02 f303 	lsl.w	r3, r2, r3
 8002330:	69ba      	ldr	r2, [r7, #24]
 8002332:	4313      	orrs	r3, r2
 8002334:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	69ba      	ldr	r2, [r7, #24]
 800233a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002344:	2b00      	cmp	r3, #0
 8002346:	f000 80a2 	beq.w	800248e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800234a:	2300      	movs	r3, #0
 800234c:	60fb      	str	r3, [r7, #12]
 800234e:	4b57      	ldr	r3, [pc, #348]	; (80024ac <HAL_GPIO_Init+0x2e8>)
 8002350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002352:	4a56      	ldr	r2, [pc, #344]	; (80024ac <HAL_GPIO_Init+0x2e8>)
 8002354:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002358:	6453      	str	r3, [r2, #68]	; 0x44
 800235a:	4b54      	ldr	r3, [pc, #336]	; (80024ac <HAL_GPIO_Init+0x2e8>)
 800235c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800235e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002362:	60fb      	str	r3, [r7, #12]
 8002364:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002366:	4a52      	ldr	r2, [pc, #328]	; (80024b0 <HAL_GPIO_Init+0x2ec>)
 8002368:	69fb      	ldr	r3, [r7, #28]
 800236a:	089b      	lsrs	r3, r3, #2
 800236c:	3302      	adds	r3, #2
 800236e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002372:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	f003 0303 	and.w	r3, r3, #3
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	220f      	movs	r2, #15
 800237e:	fa02 f303 	lsl.w	r3, r2, r3
 8002382:	43db      	mvns	r3, r3
 8002384:	69ba      	ldr	r2, [r7, #24]
 8002386:	4013      	ands	r3, r2
 8002388:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4a49      	ldr	r2, [pc, #292]	; (80024b4 <HAL_GPIO_Init+0x2f0>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d019      	beq.n	80023c6 <HAL_GPIO_Init+0x202>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4a48      	ldr	r2, [pc, #288]	; (80024b8 <HAL_GPIO_Init+0x2f4>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d013      	beq.n	80023c2 <HAL_GPIO_Init+0x1fe>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4a47      	ldr	r2, [pc, #284]	; (80024bc <HAL_GPIO_Init+0x2f8>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d00d      	beq.n	80023be <HAL_GPIO_Init+0x1fa>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4a46      	ldr	r2, [pc, #280]	; (80024c0 <HAL_GPIO_Init+0x2fc>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d007      	beq.n	80023ba <HAL_GPIO_Init+0x1f6>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4a45      	ldr	r2, [pc, #276]	; (80024c4 <HAL_GPIO_Init+0x300>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d101      	bne.n	80023b6 <HAL_GPIO_Init+0x1f2>
 80023b2:	2304      	movs	r3, #4
 80023b4:	e008      	b.n	80023c8 <HAL_GPIO_Init+0x204>
 80023b6:	2307      	movs	r3, #7
 80023b8:	e006      	b.n	80023c8 <HAL_GPIO_Init+0x204>
 80023ba:	2303      	movs	r3, #3
 80023bc:	e004      	b.n	80023c8 <HAL_GPIO_Init+0x204>
 80023be:	2302      	movs	r3, #2
 80023c0:	e002      	b.n	80023c8 <HAL_GPIO_Init+0x204>
 80023c2:	2301      	movs	r3, #1
 80023c4:	e000      	b.n	80023c8 <HAL_GPIO_Init+0x204>
 80023c6:	2300      	movs	r3, #0
 80023c8:	69fa      	ldr	r2, [r7, #28]
 80023ca:	f002 0203 	and.w	r2, r2, #3
 80023ce:	0092      	lsls	r2, r2, #2
 80023d0:	4093      	lsls	r3, r2
 80023d2:	69ba      	ldr	r2, [r7, #24]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023d8:	4935      	ldr	r1, [pc, #212]	; (80024b0 <HAL_GPIO_Init+0x2ec>)
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	089b      	lsrs	r3, r3, #2
 80023de:	3302      	adds	r3, #2
 80023e0:	69ba      	ldr	r2, [r7, #24]
 80023e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023e6:	4b38      	ldr	r3, [pc, #224]	; (80024c8 <HAL_GPIO_Init+0x304>)
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	43db      	mvns	r3, r3
 80023f0:	69ba      	ldr	r2, [r7, #24]
 80023f2:	4013      	ands	r3, r2
 80023f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d003      	beq.n	800240a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002402:	69ba      	ldr	r2, [r7, #24]
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	4313      	orrs	r3, r2
 8002408:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800240a:	4a2f      	ldr	r2, [pc, #188]	; (80024c8 <HAL_GPIO_Init+0x304>)
 800240c:	69bb      	ldr	r3, [r7, #24]
 800240e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002410:	4b2d      	ldr	r3, [pc, #180]	; (80024c8 <HAL_GPIO_Init+0x304>)
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	43db      	mvns	r3, r3
 800241a:	69ba      	ldr	r2, [r7, #24]
 800241c:	4013      	ands	r3, r2
 800241e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002428:	2b00      	cmp	r3, #0
 800242a:	d003      	beq.n	8002434 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800242c:	69ba      	ldr	r2, [r7, #24]
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	4313      	orrs	r3, r2
 8002432:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002434:	4a24      	ldr	r2, [pc, #144]	; (80024c8 <HAL_GPIO_Init+0x304>)
 8002436:	69bb      	ldr	r3, [r7, #24]
 8002438:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800243a:	4b23      	ldr	r3, [pc, #140]	; (80024c8 <HAL_GPIO_Init+0x304>)
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	43db      	mvns	r3, r3
 8002444:	69ba      	ldr	r2, [r7, #24]
 8002446:	4013      	ands	r3, r2
 8002448:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d003      	beq.n	800245e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002456:	69ba      	ldr	r2, [r7, #24]
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	4313      	orrs	r3, r2
 800245c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800245e:	4a1a      	ldr	r2, [pc, #104]	; (80024c8 <HAL_GPIO_Init+0x304>)
 8002460:	69bb      	ldr	r3, [r7, #24]
 8002462:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002464:	4b18      	ldr	r3, [pc, #96]	; (80024c8 <HAL_GPIO_Init+0x304>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	43db      	mvns	r3, r3
 800246e:	69ba      	ldr	r2, [r7, #24]
 8002470:	4013      	ands	r3, r2
 8002472:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800247c:	2b00      	cmp	r3, #0
 800247e:	d003      	beq.n	8002488 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002480:	69ba      	ldr	r2, [r7, #24]
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	4313      	orrs	r3, r2
 8002486:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002488:	4a0f      	ldr	r2, [pc, #60]	; (80024c8 <HAL_GPIO_Init+0x304>)
 800248a:	69bb      	ldr	r3, [r7, #24]
 800248c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	3301      	adds	r3, #1
 8002492:	61fb      	str	r3, [r7, #28]
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	2b0f      	cmp	r3, #15
 8002498:	f67f aea2 	bls.w	80021e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800249c:	bf00      	nop
 800249e:	bf00      	nop
 80024a0:	3724      	adds	r7, #36	; 0x24
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr
 80024aa:	bf00      	nop
 80024ac:	40023800 	.word	0x40023800
 80024b0:	40013800 	.word	0x40013800
 80024b4:	40020000 	.word	0x40020000
 80024b8:	40020400 	.word	0x40020400
 80024bc:	40020800 	.word	0x40020800
 80024c0:	40020c00 	.word	0x40020c00
 80024c4:	40021000 	.word	0x40021000
 80024c8:	40013c00 	.word	0x40013c00

080024cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b083      	sub	sp, #12
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
 80024d4:	460b      	mov	r3, r1
 80024d6:	807b      	strh	r3, [r7, #2]
 80024d8:	4613      	mov	r3, r2
 80024da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024dc:	787b      	ldrb	r3, [r7, #1]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d003      	beq.n	80024ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024e2:	887a      	ldrh	r2, [r7, #2]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80024e8:	e003      	b.n	80024f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80024ea:	887b      	ldrh	r3, [r7, #2]
 80024ec:	041a      	lsls	r2, r3, #16
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	619a      	str	r2, [r3, #24]
}
 80024f2:	bf00      	nop
 80024f4:	370c      	adds	r7, #12
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr
	...

08002500 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b082      	sub	sp, #8
 8002504:	af00      	add	r7, sp, #0
 8002506:	4603      	mov	r3, r0
 8002508:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800250a:	4b08      	ldr	r3, [pc, #32]	; (800252c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800250c:	695a      	ldr	r2, [r3, #20]
 800250e:	88fb      	ldrh	r3, [r7, #6]
 8002510:	4013      	ands	r3, r2
 8002512:	2b00      	cmp	r3, #0
 8002514:	d006      	beq.n	8002524 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002516:	4a05      	ldr	r2, [pc, #20]	; (800252c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002518:	88fb      	ldrh	r3, [r7, #6]
 800251a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800251c:	88fb      	ldrh	r3, [r7, #6]
 800251e:	4618      	mov	r0, r3
 8002520:	f7fe fbea 	bl	8000cf8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002524:	bf00      	nop
 8002526:	3708      	adds	r7, #8
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}
 800252c:	40013c00 	.word	0x40013c00

08002530 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b086      	sub	sp, #24
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d101      	bne.n	8002542 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e267      	b.n	8002a12 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0301 	and.w	r3, r3, #1
 800254a:	2b00      	cmp	r3, #0
 800254c:	d075      	beq.n	800263a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800254e:	4b88      	ldr	r3, [pc, #544]	; (8002770 <HAL_RCC_OscConfig+0x240>)
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	f003 030c 	and.w	r3, r3, #12
 8002556:	2b04      	cmp	r3, #4
 8002558:	d00c      	beq.n	8002574 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800255a:	4b85      	ldr	r3, [pc, #532]	; (8002770 <HAL_RCC_OscConfig+0x240>)
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002562:	2b08      	cmp	r3, #8
 8002564:	d112      	bne.n	800258c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002566:	4b82      	ldr	r3, [pc, #520]	; (8002770 <HAL_RCC_OscConfig+0x240>)
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800256e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002572:	d10b      	bne.n	800258c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002574:	4b7e      	ldr	r3, [pc, #504]	; (8002770 <HAL_RCC_OscConfig+0x240>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800257c:	2b00      	cmp	r3, #0
 800257e:	d05b      	beq.n	8002638 <HAL_RCC_OscConfig+0x108>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d157      	bne.n	8002638 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	e242      	b.n	8002a12 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002594:	d106      	bne.n	80025a4 <HAL_RCC_OscConfig+0x74>
 8002596:	4b76      	ldr	r3, [pc, #472]	; (8002770 <HAL_RCC_OscConfig+0x240>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a75      	ldr	r2, [pc, #468]	; (8002770 <HAL_RCC_OscConfig+0x240>)
 800259c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025a0:	6013      	str	r3, [r2, #0]
 80025a2:	e01d      	b.n	80025e0 <HAL_RCC_OscConfig+0xb0>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025ac:	d10c      	bne.n	80025c8 <HAL_RCC_OscConfig+0x98>
 80025ae:	4b70      	ldr	r3, [pc, #448]	; (8002770 <HAL_RCC_OscConfig+0x240>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a6f      	ldr	r2, [pc, #444]	; (8002770 <HAL_RCC_OscConfig+0x240>)
 80025b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025b8:	6013      	str	r3, [r2, #0]
 80025ba:	4b6d      	ldr	r3, [pc, #436]	; (8002770 <HAL_RCC_OscConfig+0x240>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a6c      	ldr	r2, [pc, #432]	; (8002770 <HAL_RCC_OscConfig+0x240>)
 80025c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025c4:	6013      	str	r3, [r2, #0]
 80025c6:	e00b      	b.n	80025e0 <HAL_RCC_OscConfig+0xb0>
 80025c8:	4b69      	ldr	r3, [pc, #420]	; (8002770 <HAL_RCC_OscConfig+0x240>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a68      	ldr	r2, [pc, #416]	; (8002770 <HAL_RCC_OscConfig+0x240>)
 80025ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025d2:	6013      	str	r3, [r2, #0]
 80025d4:	4b66      	ldr	r3, [pc, #408]	; (8002770 <HAL_RCC_OscConfig+0x240>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a65      	ldr	r2, [pc, #404]	; (8002770 <HAL_RCC_OscConfig+0x240>)
 80025da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d013      	beq.n	8002610 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025e8:	f7ff f8c8 	bl	800177c <HAL_GetTick>
 80025ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ee:	e008      	b.n	8002602 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025f0:	f7ff f8c4 	bl	800177c <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	2b64      	cmp	r3, #100	; 0x64
 80025fc:	d901      	bls.n	8002602 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80025fe:	2303      	movs	r3, #3
 8002600:	e207      	b.n	8002a12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002602:	4b5b      	ldr	r3, [pc, #364]	; (8002770 <HAL_RCC_OscConfig+0x240>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d0f0      	beq.n	80025f0 <HAL_RCC_OscConfig+0xc0>
 800260e:	e014      	b.n	800263a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002610:	f7ff f8b4 	bl	800177c <HAL_GetTick>
 8002614:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002616:	e008      	b.n	800262a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002618:	f7ff f8b0 	bl	800177c <HAL_GetTick>
 800261c:	4602      	mov	r2, r0
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	2b64      	cmp	r3, #100	; 0x64
 8002624:	d901      	bls.n	800262a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002626:	2303      	movs	r3, #3
 8002628:	e1f3      	b.n	8002a12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800262a:	4b51      	ldr	r3, [pc, #324]	; (8002770 <HAL_RCC_OscConfig+0x240>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d1f0      	bne.n	8002618 <HAL_RCC_OscConfig+0xe8>
 8002636:	e000      	b.n	800263a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002638:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0302 	and.w	r3, r3, #2
 8002642:	2b00      	cmp	r3, #0
 8002644:	d063      	beq.n	800270e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002646:	4b4a      	ldr	r3, [pc, #296]	; (8002770 <HAL_RCC_OscConfig+0x240>)
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	f003 030c 	and.w	r3, r3, #12
 800264e:	2b00      	cmp	r3, #0
 8002650:	d00b      	beq.n	800266a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002652:	4b47      	ldr	r3, [pc, #284]	; (8002770 <HAL_RCC_OscConfig+0x240>)
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800265a:	2b08      	cmp	r3, #8
 800265c:	d11c      	bne.n	8002698 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800265e:	4b44      	ldr	r3, [pc, #272]	; (8002770 <HAL_RCC_OscConfig+0x240>)
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d116      	bne.n	8002698 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800266a:	4b41      	ldr	r3, [pc, #260]	; (8002770 <HAL_RCC_OscConfig+0x240>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 0302 	and.w	r3, r3, #2
 8002672:	2b00      	cmp	r3, #0
 8002674:	d005      	beq.n	8002682 <HAL_RCC_OscConfig+0x152>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	68db      	ldr	r3, [r3, #12]
 800267a:	2b01      	cmp	r3, #1
 800267c:	d001      	beq.n	8002682 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e1c7      	b.n	8002a12 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002682:	4b3b      	ldr	r3, [pc, #236]	; (8002770 <HAL_RCC_OscConfig+0x240>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	691b      	ldr	r3, [r3, #16]
 800268e:	00db      	lsls	r3, r3, #3
 8002690:	4937      	ldr	r1, [pc, #220]	; (8002770 <HAL_RCC_OscConfig+0x240>)
 8002692:	4313      	orrs	r3, r2
 8002694:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002696:	e03a      	b.n	800270e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d020      	beq.n	80026e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026a0:	4b34      	ldr	r3, [pc, #208]	; (8002774 <HAL_RCC_OscConfig+0x244>)
 80026a2:	2201      	movs	r2, #1
 80026a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026a6:	f7ff f869 	bl	800177c <HAL_GetTick>
 80026aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026ac:	e008      	b.n	80026c0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026ae:	f7ff f865 	bl	800177c <HAL_GetTick>
 80026b2:	4602      	mov	r2, r0
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	d901      	bls.n	80026c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80026bc:	2303      	movs	r3, #3
 80026be:	e1a8      	b.n	8002a12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026c0:	4b2b      	ldr	r3, [pc, #172]	; (8002770 <HAL_RCC_OscConfig+0x240>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 0302 	and.w	r3, r3, #2
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d0f0      	beq.n	80026ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026cc:	4b28      	ldr	r3, [pc, #160]	; (8002770 <HAL_RCC_OscConfig+0x240>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	691b      	ldr	r3, [r3, #16]
 80026d8:	00db      	lsls	r3, r3, #3
 80026da:	4925      	ldr	r1, [pc, #148]	; (8002770 <HAL_RCC_OscConfig+0x240>)
 80026dc:	4313      	orrs	r3, r2
 80026de:	600b      	str	r3, [r1, #0]
 80026e0:	e015      	b.n	800270e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026e2:	4b24      	ldr	r3, [pc, #144]	; (8002774 <HAL_RCC_OscConfig+0x244>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026e8:	f7ff f848 	bl	800177c <HAL_GetTick>
 80026ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026ee:	e008      	b.n	8002702 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026f0:	f7ff f844 	bl	800177c <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	2b02      	cmp	r3, #2
 80026fc:	d901      	bls.n	8002702 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e187      	b.n	8002a12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002702:	4b1b      	ldr	r3, [pc, #108]	; (8002770 <HAL_RCC_OscConfig+0x240>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0302 	and.w	r3, r3, #2
 800270a:	2b00      	cmp	r3, #0
 800270c:	d1f0      	bne.n	80026f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0308 	and.w	r3, r3, #8
 8002716:	2b00      	cmp	r3, #0
 8002718:	d036      	beq.n	8002788 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	695b      	ldr	r3, [r3, #20]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d016      	beq.n	8002750 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002722:	4b15      	ldr	r3, [pc, #84]	; (8002778 <HAL_RCC_OscConfig+0x248>)
 8002724:	2201      	movs	r2, #1
 8002726:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002728:	f7ff f828 	bl	800177c <HAL_GetTick>
 800272c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800272e:	e008      	b.n	8002742 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002730:	f7ff f824 	bl	800177c <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	2b02      	cmp	r3, #2
 800273c:	d901      	bls.n	8002742 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e167      	b.n	8002a12 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002742:	4b0b      	ldr	r3, [pc, #44]	; (8002770 <HAL_RCC_OscConfig+0x240>)
 8002744:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002746:	f003 0302 	and.w	r3, r3, #2
 800274a:	2b00      	cmp	r3, #0
 800274c:	d0f0      	beq.n	8002730 <HAL_RCC_OscConfig+0x200>
 800274e:	e01b      	b.n	8002788 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002750:	4b09      	ldr	r3, [pc, #36]	; (8002778 <HAL_RCC_OscConfig+0x248>)
 8002752:	2200      	movs	r2, #0
 8002754:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002756:	f7ff f811 	bl	800177c <HAL_GetTick>
 800275a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800275c:	e00e      	b.n	800277c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800275e:	f7ff f80d 	bl	800177c <HAL_GetTick>
 8002762:	4602      	mov	r2, r0
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	1ad3      	subs	r3, r2, r3
 8002768:	2b02      	cmp	r3, #2
 800276a:	d907      	bls.n	800277c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800276c:	2303      	movs	r3, #3
 800276e:	e150      	b.n	8002a12 <HAL_RCC_OscConfig+0x4e2>
 8002770:	40023800 	.word	0x40023800
 8002774:	42470000 	.word	0x42470000
 8002778:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800277c:	4b88      	ldr	r3, [pc, #544]	; (80029a0 <HAL_RCC_OscConfig+0x470>)
 800277e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002780:	f003 0302 	and.w	r3, r3, #2
 8002784:	2b00      	cmp	r3, #0
 8002786:	d1ea      	bne.n	800275e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 0304 	and.w	r3, r3, #4
 8002790:	2b00      	cmp	r3, #0
 8002792:	f000 8097 	beq.w	80028c4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002796:	2300      	movs	r3, #0
 8002798:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800279a:	4b81      	ldr	r3, [pc, #516]	; (80029a0 <HAL_RCC_OscConfig+0x470>)
 800279c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d10f      	bne.n	80027c6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027a6:	2300      	movs	r3, #0
 80027a8:	60bb      	str	r3, [r7, #8]
 80027aa:	4b7d      	ldr	r3, [pc, #500]	; (80029a0 <HAL_RCC_OscConfig+0x470>)
 80027ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ae:	4a7c      	ldr	r2, [pc, #496]	; (80029a0 <HAL_RCC_OscConfig+0x470>)
 80027b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027b4:	6413      	str	r3, [r2, #64]	; 0x40
 80027b6:	4b7a      	ldr	r3, [pc, #488]	; (80029a0 <HAL_RCC_OscConfig+0x470>)
 80027b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027be:	60bb      	str	r3, [r7, #8]
 80027c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027c2:	2301      	movs	r3, #1
 80027c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027c6:	4b77      	ldr	r3, [pc, #476]	; (80029a4 <HAL_RCC_OscConfig+0x474>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d118      	bne.n	8002804 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027d2:	4b74      	ldr	r3, [pc, #464]	; (80029a4 <HAL_RCC_OscConfig+0x474>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a73      	ldr	r2, [pc, #460]	; (80029a4 <HAL_RCC_OscConfig+0x474>)
 80027d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027de:	f7fe ffcd 	bl	800177c <HAL_GetTick>
 80027e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027e4:	e008      	b.n	80027f8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027e6:	f7fe ffc9 	bl	800177c <HAL_GetTick>
 80027ea:	4602      	mov	r2, r0
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	2b02      	cmp	r3, #2
 80027f2:	d901      	bls.n	80027f8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80027f4:	2303      	movs	r3, #3
 80027f6:	e10c      	b.n	8002a12 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027f8:	4b6a      	ldr	r3, [pc, #424]	; (80029a4 <HAL_RCC_OscConfig+0x474>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002800:	2b00      	cmp	r3, #0
 8002802:	d0f0      	beq.n	80027e6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	2b01      	cmp	r3, #1
 800280a:	d106      	bne.n	800281a <HAL_RCC_OscConfig+0x2ea>
 800280c:	4b64      	ldr	r3, [pc, #400]	; (80029a0 <HAL_RCC_OscConfig+0x470>)
 800280e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002810:	4a63      	ldr	r2, [pc, #396]	; (80029a0 <HAL_RCC_OscConfig+0x470>)
 8002812:	f043 0301 	orr.w	r3, r3, #1
 8002816:	6713      	str	r3, [r2, #112]	; 0x70
 8002818:	e01c      	b.n	8002854 <HAL_RCC_OscConfig+0x324>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	2b05      	cmp	r3, #5
 8002820:	d10c      	bne.n	800283c <HAL_RCC_OscConfig+0x30c>
 8002822:	4b5f      	ldr	r3, [pc, #380]	; (80029a0 <HAL_RCC_OscConfig+0x470>)
 8002824:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002826:	4a5e      	ldr	r2, [pc, #376]	; (80029a0 <HAL_RCC_OscConfig+0x470>)
 8002828:	f043 0304 	orr.w	r3, r3, #4
 800282c:	6713      	str	r3, [r2, #112]	; 0x70
 800282e:	4b5c      	ldr	r3, [pc, #368]	; (80029a0 <HAL_RCC_OscConfig+0x470>)
 8002830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002832:	4a5b      	ldr	r2, [pc, #364]	; (80029a0 <HAL_RCC_OscConfig+0x470>)
 8002834:	f043 0301 	orr.w	r3, r3, #1
 8002838:	6713      	str	r3, [r2, #112]	; 0x70
 800283a:	e00b      	b.n	8002854 <HAL_RCC_OscConfig+0x324>
 800283c:	4b58      	ldr	r3, [pc, #352]	; (80029a0 <HAL_RCC_OscConfig+0x470>)
 800283e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002840:	4a57      	ldr	r2, [pc, #348]	; (80029a0 <HAL_RCC_OscConfig+0x470>)
 8002842:	f023 0301 	bic.w	r3, r3, #1
 8002846:	6713      	str	r3, [r2, #112]	; 0x70
 8002848:	4b55      	ldr	r3, [pc, #340]	; (80029a0 <HAL_RCC_OscConfig+0x470>)
 800284a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800284c:	4a54      	ldr	r2, [pc, #336]	; (80029a0 <HAL_RCC_OscConfig+0x470>)
 800284e:	f023 0304 	bic.w	r3, r3, #4
 8002852:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d015      	beq.n	8002888 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800285c:	f7fe ff8e 	bl	800177c <HAL_GetTick>
 8002860:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002862:	e00a      	b.n	800287a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002864:	f7fe ff8a 	bl	800177c <HAL_GetTick>
 8002868:	4602      	mov	r2, r0
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002872:	4293      	cmp	r3, r2
 8002874:	d901      	bls.n	800287a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e0cb      	b.n	8002a12 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800287a:	4b49      	ldr	r3, [pc, #292]	; (80029a0 <HAL_RCC_OscConfig+0x470>)
 800287c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800287e:	f003 0302 	and.w	r3, r3, #2
 8002882:	2b00      	cmp	r3, #0
 8002884:	d0ee      	beq.n	8002864 <HAL_RCC_OscConfig+0x334>
 8002886:	e014      	b.n	80028b2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002888:	f7fe ff78 	bl	800177c <HAL_GetTick>
 800288c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800288e:	e00a      	b.n	80028a6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002890:	f7fe ff74 	bl	800177c <HAL_GetTick>
 8002894:	4602      	mov	r2, r0
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	f241 3288 	movw	r2, #5000	; 0x1388
 800289e:	4293      	cmp	r3, r2
 80028a0:	d901      	bls.n	80028a6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80028a2:	2303      	movs	r3, #3
 80028a4:	e0b5      	b.n	8002a12 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028a6:	4b3e      	ldr	r3, [pc, #248]	; (80029a0 <HAL_RCC_OscConfig+0x470>)
 80028a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028aa:	f003 0302 	and.w	r3, r3, #2
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d1ee      	bne.n	8002890 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028b2:	7dfb      	ldrb	r3, [r7, #23]
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d105      	bne.n	80028c4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028b8:	4b39      	ldr	r3, [pc, #228]	; (80029a0 <HAL_RCC_OscConfig+0x470>)
 80028ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028bc:	4a38      	ldr	r2, [pc, #224]	; (80029a0 <HAL_RCC_OscConfig+0x470>)
 80028be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028c2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	699b      	ldr	r3, [r3, #24]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	f000 80a1 	beq.w	8002a10 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80028ce:	4b34      	ldr	r3, [pc, #208]	; (80029a0 <HAL_RCC_OscConfig+0x470>)
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	f003 030c 	and.w	r3, r3, #12
 80028d6:	2b08      	cmp	r3, #8
 80028d8:	d05c      	beq.n	8002994 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	699b      	ldr	r3, [r3, #24]
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d141      	bne.n	8002966 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028e2:	4b31      	ldr	r3, [pc, #196]	; (80029a8 <HAL_RCC_OscConfig+0x478>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028e8:	f7fe ff48 	bl	800177c <HAL_GetTick>
 80028ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028ee:	e008      	b.n	8002902 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028f0:	f7fe ff44 	bl	800177c <HAL_GetTick>
 80028f4:	4602      	mov	r2, r0
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d901      	bls.n	8002902 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80028fe:	2303      	movs	r3, #3
 8002900:	e087      	b.n	8002a12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002902:	4b27      	ldr	r3, [pc, #156]	; (80029a0 <HAL_RCC_OscConfig+0x470>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800290a:	2b00      	cmp	r3, #0
 800290c:	d1f0      	bne.n	80028f0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	69da      	ldr	r2, [r3, #28]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6a1b      	ldr	r3, [r3, #32]
 8002916:	431a      	orrs	r2, r3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800291c:	019b      	lsls	r3, r3, #6
 800291e:	431a      	orrs	r2, r3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002924:	085b      	lsrs	r3, r3, #1
 8002926:	3b01      	subs	r3, #1
 8002928:	041b      	lsls	r3, r3, #16
 800292a:	431a      	orrs	r2, r3
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002930:	061b      	lsls	r3, r3, #24
 8002932:	491b      	ldr	r1, [pc, #108]	; (80029a0 <HAL_RCC_OscConfig+0x470>)
 8002934:	4313      	orrs	r3, r2
 8002936:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002938:	4b1b      	ldr	r3, [pc, #108]	; (80029a8 <HAL_RCC_OscConfig+0x478>)
 800293a:	2201      	movs	r2, #1
 800293c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800293e:	f7fe ff1d 	bl	800177c <HAL_GetTick>
 8002942:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002944:	e008      	b.n	8002958 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002946:	f7fe ff19 	bl	800177c <HAL_GetTick>
 800294a:	4602      	mov	r2, r0
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	1ad3      	subs	r3, r2, r3
 8002950:	2b02      	cmp	r3, #2
 8002952:	d901      	bls.n	8002958 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002954:	2303      	movs	r3, #3
 8002956:	e05c      	b.n	8002a12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002958:	4b11      	ldr	r3, [pc, #68]	; (80029a0 <HAL_RCC_OscConfig+0x470>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002960:	2b00      	cmp	r3, #0
 8002962:	d0f0      	beq.n	8002946 <HAL_RCC_OscConfig+0x416>
 8002964:	e054      	b.n	8002a10 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002966:	4b10      	ldr	r3, [pc, #64]	; (80029a8 <HAL_RCC_OscConfig+0x478>)
 8002968:	2200      	movs	r2, #0
 800296a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800296c:	f7fe ff06 	bl	800177c <HAL_GetTick>
 8002970:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002972:	e008      	b.n	8002986 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002974:	f7fe ff02 	bl	800177c <HAL_GetTick>
 8002978:	4602      	mov	r2, r0
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	2b02      	cmp	r3, #2
 8002980:	d901      	bls.n	8002986 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	e045      	b.n	8002a12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002986:	4b06      	ldr	r3, [pc, #24]	; (80029a0 <HAL_RCC_OscConfig+0x470>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d1f0      	bne.n	8002974 <HAL_RCC_OscConfig+0x444>
 8002992:	e03d      	b.n	8002a10 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	699b      	ldr	r3, [r3, #24]
 8002998:	2b01      	cmp	r3, #1
 800299a:	d107      	bne.n	80029ac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	e038      	b.n	8002a12 <HAL_RCC_OscConfig+0x4e2>
 80029a0:	40023800 	.word	0x40023800
 80029a4:	40007000 	.word	0x40007000
 80029a8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80029ac:	4b1b      	ldr	r3, [pc, #108]	; (8002a1c <HAL_RCC_OscConfig+0x4ec>)
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	699b      	ldr	r3, [r3, #24]
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d028      	beq.n	8002a0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d121      	bne.n	8002a0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d11a      	bne.n	8002a0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029d6:	68fa      	ldr	r2, [r7, #12]
 80029d8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80029dc:	4013      	ands	r3, r2
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80029e2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d111      	bne.n	8002a0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029f2:	085b      	lsrs	r3, r3, #1
 80029f4:	3b01      	subs	r3, #1
 80029f6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d107      	bne.n	8002a0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a06:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d001      	beq.n	8002a10 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e000      	b.n	8002a12 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002a10:	2300      	movs	r3, #0
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3718      	adds	r7, #24
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	40023800 	.word	0x40023800

08002a20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b084      	sub	sp, #16
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d101      	bne.n	8002a34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e0cc      	b.n	8002bce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a34:	4b68      	ldr	r3, [pc, #416]	; (8002bd8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0307 	and.w	r3, r3, #7
 8002a3c:	683a      	ldr	r2, [r7, #0]
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d90c      	bls.n	8002a5c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a42:	4b65      	ldr	r3, [pc, #404]	; (8002bd8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a44:	683a      	ldr	r2, [r7, #0]
 8002a46:	b2d2      	uxtb	r2, r2
 8002a48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a4a:	4b63      	ldr	r3, [pc, #396]	; (8002bd8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0307 	and.w	r3, r3, #7
 8002a52:	683a      	ldr	r2, [r7, #0]
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d001      	beq.n	8002a5c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e0b8      	b.n	8002bce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 0302 	and.w	r3, r3, #2
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d020      	beq.n	8002aaa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 0304 	and.w	r3, r3, #4
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d005      	beq.n	8002a80 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a74:	4b59      	ldr	r3, [pc, #356]	; (8002bdc <HAL_RCC_ClockConfig+0x1bc>)
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	4a58      	ldr	r2, [pc, #352]	; (8002bdc <HAL_RCC_ClockConfig+0x1bc>)
 8002a7a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a7e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 0308 	and.w	r3, r3, #8
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d005      	beq.n	8002a98 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a8c:	4b53      	ldr	r3, [pc, #332]	; (8002bdc <HAL_RCC_ClockConfig+0x1bc>)
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	4a52      	ldr	r2, [pc, #328]	; (8002bdc <HAL_RCC_ClockConfig+0x1bc>)
 8002a92:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a96:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a98:	4b50      	ldr	r3, [pc, #320]	; (8002bdc <HAL_RCC_ClockConfig+0x1bc>)
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	494d      	ldr	r1, [pc, #308]	; (8002bdc <HAL_RCC_ClockConfig+0x1bc>)
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 0301 	and.w	r3, r3, #1
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d044      	beq.n	8002b40 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d107      	bne.n	8002ace <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002abe:	4b47      	ldr	r3, [pc, #284]	; (8002bdc <HAL_RCC_ClockConfig+0x1bc>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d119      	bne.n	8002afe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e07f      	b.n	8002bce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	2b02      	cmp	r3, #2
 8002ad4:	d003      	beq.n	8002ade <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ada:	2b03      	cmp	r3, #3
 8002adc:	d107      	bne.n	8002aee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ade:	4b3f      	ldr	r3, [pc, #252]	; (8002bdc <HAL_RCC_ClockConfig+0x1bc>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d109      	bne.n	8002afe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e06f      	b.n	8002bce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002aee:	4b3b      	ldr	r3, [pc, #236]	; (8002bdc <HAL_RCC_ClockConfig+0x1bc>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0302 	and.w	r3, r3, #2
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d101      	bne.n	8002afe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e067      	b.n	8002bce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002afe:	4b37      	ldr	r3, [pc, #220]	; (8002bdc <HAL_RCC_ClockConfig+0x1bc>)
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	f023 0203 	bic.w	r2, r3, #3
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	4934      	ldr	r1, [pc, #208]	; (8002bdc <HAL_RCC_ClockConfig+0x1bc>)
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b10:	f7fe fe34 	bl	800177c <HAL_GetTick>
 8002b14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b16:	e00a      	b.n	8002b2e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b18:	f7fe fe30 	bl	800177c <HAL_GetTick>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d901      	bls.n	8002b2e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	e04f      	b.n	8002bce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b2e:	4b2b      	ldr	r3, [pc, #172]	; (8002bdc <HAL_RCC_ClockConfig+0x1bc>)
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	f003 020c 	and.w	r2, r3, #12
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d1eb      	bne.n	8002b18 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b40:	4b25      	ldr	r3, [pc, #148]	; (8002bd8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 0307 	and.w	r3, r3, #7
 8002b48:	683a      	ldr	r2, [r7, #0]
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d20c      	bcs.n	8002b68 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b4e:	4b22      	ldr	r3, [pc, #136]	; (8002bd8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b50:	683a      	ldr	r2, [r7, #0]
 8002b52:	b2d2      	uxtb	r2, r2
 8002b54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b56:	4b20      	ldr	r3, [pc, #128]	; (8002bd8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0307 	and.w	r3, r3, #7
 8002b5e:	683a      	ldr	r2, [r7, #0]
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d001      	beq.n	8002b68 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	e032      	b.n	8002bce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 0304 	and.w	r3, r3, #4
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d008      	beq.n	8002b86 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b74:	4b19      	ldr	r3, [pc, #100]	; (8002bdc <HAL_RCC_ClockConfig+0x1bc>)
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	4916      	ldr	r1, [pc, #88]	; (8002bdc <HAL_RCC_ClockConfig+0x1bc>)
 8002b82:	4313      	orrs	r3, r2
 8002b84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0308 	and.w	r3, r3, #8
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d009      	beq.n	8002ba6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b92:	4b12      	ldr	r3, [pc, #72]	; (8002bdc <HAL_RCC_ClockConfig+0x1bc>)
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	691b      	ldr	r3, [r3, #16]
 8002b9e:	00db      	lsls	r3, r3, #3
 8002ba0:	490e      	ldr	r1, [pc, #56]	; (8002bdc <HAL_RCC_ClockConfig+0x1bc>)
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002ba6:	f000 f821 	bl	8002bec <HAL_RCC_GetSysClockFreq>
 8002baa:	4602      	mov	r2, r0
 8002bac:	4b0b      	ldr	r3, [pc, #44]	; (8002bdc <HAL_RCC_ClockConfig+0x1bc>)
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	091b      	lsrs	r3, r3, #4
 8002bb2:	f003 030f 	and.w	r3, r3, #15
 8002bb6:	490a      	ldr	r1, [pc, #40]	; (8002be0 <HAL_RCC_ClockConfig+0x1c0>)
 8002bb8:	5ccb      	ldrb	r3, [r1, r3]
 8002bba:	fa22 f303 	lsr.w	r3, r2, r3
 8002bbe:	4a09      	ldr	r2, [pc, #36]	; (8002be4 <HAL_RCC_ClockConfig+0x1c4>)
 8002bc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002bc2:	4b09      	ldr	r3, [pc, #36]	; (8002be8 <HAL_RCC_ClockConfig+0x1c8>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f7fe fd94 	bl	80016f4 <HAL_InitTick>

  return HAL_OK;
 8002bcc:	2300      	movs	r3, #0
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3710      	adds	r7, #16
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	40023c00 	.word	0x40023c00
 8002bdc:	40023800 	.word	0x40023800
 8002be0:	08003640 	.word	0x08003640
 8002be4:	2000003c 	.word	0x2000003c
 8002be8:	20000040 	.word	0x20000040

08002bec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002bf0:	b094      	sub	sp, #80	; 0x50
 8002bf2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	647b      	str	r3, [r7, #68]	; 0x44
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002c00:	2300      	movs	r3, #0
 8002c02:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c04:	4b79      	ldr	r3, [pc, #484]	; (8002dec <HAL_RCC_GetSysClockFreq+0x200>)
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	f003 030c 	and.w	r3, r3, #12
 8002c0c:	2b08      	cmp	r3, #8
 8002c0e:	d00d      	beq.n	8002c2c <HAL_RCC_GetSysClockFreq+0x40>
 8002c10:	2b08      	cmp	r3, #8
 8002c12:	f200 80e1 	bhi.w	8002dd8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d002      	beq.n	8002c20 <HAL_RCC_GetSysClockFreq+0x34>
 8002c1a:	2b04      	cmp	r3, #4
 8002c1c:	d003      	beq.n	8002c26 <HAL_RCC_GetSysClockFreq+0x3a>
 8002c1e:	e0db      	b.n	8002dd8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c20:	4b73      	ldr	r3, [pc, #460]	; (8002df0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002c22:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002c24:	e0db      	b.n	8002dde <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c26:	4b73      	ldr	r3, [pc, #460]	; (8002df4 <HAL_RCC_GetSysClockFreq+0x208>)
 8002c28:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c2a:	e0d8      	b.n	8002dde <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c2c:	4b6f      	ldr	r3, [pc, #444]	; (8002dec <HAL_RCC_GetSysClockFreq+0x200>)
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c34:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c36:	4b6d      	ldr	r3, [pc, #436]	; (8002dec <HAL_RCC_GetSysClockFreq+0x200>)
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d063      	beq.n	8002d0a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c42:	4b6a      	ldr	r3, [pc, #424]	; (8002dec <HAL_RCC_GetSysClockFreq+0x200>)
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	099b      	lsrs	r3, r3, #6
 8002c48:	2200      	movs	r2, #0
 8002c4a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c4c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c54:	633b      	str	r3, [r7, #48]	; 0x30
 8002c56:	2300      	movs	r3, #0
 8002c58:	637b      	str	r3, [r7, #52]	; 0x34
 8002c5a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002c5e:	4622      	mov	r2, r4
 8002c60:	462b      	mov	r3, r5
 8002c62:	f04f 0000 	mov.w	r0, #0
 8002c66:	f04f 0100 	mov.w	r1, #0
 8002c6a:	0159      	lsls	r1, r3, #5
 8002c6c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c70:	0150      	lsls	r0, r2, #5
 8002c72:	4602      	mov	r2, r0
 8002c74:	460b      	mov	r3, r1
 8002c76:	4621      	mov	r1, r4
 8002c78:	1a51      	subs	r1, r2, r1
 8002c7a:	6139      	str	r1, [r7, #16]
 8002c7c:	4629      	mov	r1, r5
 8002c7e:	eb63 0301 	sbc.w	r3, r3, r1
 8002c82:	617b      	str	r3, [r7, #20]
 8002c84:	f04f 0200 	mov.w	r2, #0
 8002c88:	f04f 0300 	mov.w	r3, #0
 8002c8c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002c90:	4659      	mov	r1, fp
 8002c92:	018b      	lsls	r3, r1, #6
 8002c94:	4651      	mov	r1, sl
 8002c96:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c9a:	4651      	mov	r1, sl
 8002c9c:	018a      	lsls	r2, r1, #6
 8002c9e:	4651      	mov	r1, sl
 8002ca0:	ebb2 0801 	subs.w	r8, r2, r1
 8002ca4:	4659      	mov	r1, fp
 8002ca6:	eb63 0901 	sbc.w	r9, r3, r1
 8002caa:	f04f 0200 	mov.w	r2, #0
 8002cae:	f04f 0300 	mov.w	r3, #0
 8002cb2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002cb6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002cba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002cbe:	4690      	mov	r8, r2
 8002cc0:	4699      	mov	r9, r3
 8002cc2:	4623      	mov	r3, r4
 8002cc4:	eb18 0303 	adds.w	r3, r8, r3
 8002cc8:	60bb      	str	r3, [r7, #8]
 8002cca:	462b      	mov	r3, r5
 8002ccc:	eb49 0303 	adc.w	r3, r9, r3
 8002cd0:	60fb      	str	r3, [r7, #12]
 8002cd2:	f04f 0200 	mov.w	r2, #0
 8002cd6:	f04f 0300 	mov.w	r3, #0
 8002cda:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002cde:	4629      	mov	r1, r5
 8002ce0:	024b      	lsls	r3, r1, #9
 8002ce2:	4621      	mov	r1, r4
 8002ce4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002ce8:	4621      	mov	r1, r4
 8002cea:	024a      	lsls	r2, r1, #9
 8002cec:	4610      	mov	r0, r2
 8002cee:	4619      	mov	r1, r3
 8002cf0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cf6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002cf8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002cfc:	f7fd fe62 	bl	80009c4 <__aeabi_uldivmod>
 8002d00:	4602      	mov	r2, r0
 8002d02:	460b      	mov	r3, r1
 8002d04:	4613      	mov	r3, r2
 8002d06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d08:	e058      	b.n	8002dbc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d0a:	4b38      	ldr	r3, [pc, #224]	; (8002dec <HAL_RCC_GetSysClockFreq+0x200>)
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	099b      	lsrs	r3, r3, #6
 8002d10:	2200      	movs	r2, #0
 8002d12:	4618      	mov	r0, r3
 8002d14:	4611      	mov	r1, r2
 8002d16:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002d1a:	623b      	str	r3, [r7, #32]
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	627b      	str	r3, [r7, #36]	; 0x24
 8002d20:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002d24:	4642      	mov	r2, r8
 8002d26:	464b      	mov	r3, r9
 8002d28:	f04f 0000 	mov.w	r0, #0
 8002d2c:	f04f 0100 	mov.w	r1, #0
 8002d30:	0159      	lsls	r1, r3, #5
 8002d32:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d36:	0150      	lsls	r0, r2, #5
 8002d38:	4602      	mov	r2, r0
 8002d3a:	460b      	mov	r3, r1
 8002d3c:	4641      	mov	r1, r8
 8002d3e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002d42:	4649      	mov	r1, r9
 8002d44:	eb63 0b01 	sbc.w	fp, r3, r1
 8002d48:	f04f 0200 	mov.w	r2, #0
 8002d4c:	f04f 0300 	mov.w	r3, #0
 8002d50:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002d54:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002d58:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002d5c:	ebb2 040a 	subs.w	r4, r2, sl
 8002d60:	eb63 050b 	sbc.w	r5, r3, fp
 8002d64:	f04f 0200 	mov.w	r2, #0
 8002d68:	f04f 0300 	mov.w	r3, #0
 8002d6c:	00eb      	lsls	r3, r5, #3
 8002d6e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d72:	00e2      	lsls	r2, r4, #3
 8002d74:	4614      	mov	r4, r2
 8002d76:	461d      	mov	r5, r3
 8002d78:	4643      	mov	r3, r8
 8002d7a:	18e3      	adds	r3, r4, r3
 8002d7c:	603b      	str	r3, [r7, #0]
 8002d7e:	464b      	mov	r3, r9
 8002d80:	eb45 0303 	adc.w	r3, r5, r3
 8002d84:	607b      	str	r3, [r7, #4]
 8002d86:	f04f 0200 	mov.w	r2, #0
 8002d8a:	f04f 0300 	mov.w	r3, #0
 8002d8e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d92:	4629      	mov	r1, r5
 8002d94:	028b      	lsls	r3, r1, #10
 8002d96:	4621      	mov	r1, r4
 8002d98:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d9c:	4621      	mov	r1, r4
 8002d9e:	028a      	lsls	r2, r1, #10
 8002da0:	4610      	mov	r0, r2
 8002da2:	4619      	mov	r1, r3
 8002da4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002da6:	2200      	movs	r2, #0
 8002da8:	61bb      	str	r3, [r7, #24]
 8002daa:	61fa      	str	r2, [r7, #28]
 8002dac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002db0:	f7fd fe08 	bl	80009c4 <__aeabi_uldivmod>
 8002db4:	4602      	mov	r2, r0
 8002db6:	460b      	mov	r3, r1
 8002db8:	4613      	mov	r3, r2
 8002dba:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002dbc:	4b0b      	ldr	r3, [pc, #44]	; (8002dec <HAL_RCC_GetSysClockFreq+0x200>)
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	0c1b      	lsrs	r3, r3, #16
 8002dc2:	f003 0303 	and.w	r3, r3, #3
 8002dc6:	3301      	adds	r3, #1
 8002dc8:	005b      	lsls	r3, r3, #1
 8002dca:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002dcc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002dce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dd4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002dd6:	e002      	b.n	8002dde <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002dd8:	4b05      	ldr	r3, [pc, #20]	; (8002df0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002dda:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ddc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002dde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3750      	adds	r7, #80	; 0x50
 8002de4:	46bd      	mov	sp, r7
 8002de6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002dea:	bf00      	nop
 8002dec:	40023800 	.word	0x40023800
 8002df0:	00f42400 	.word	0x00f42400
 8002df4:	007a1200 	.word	0x007a1200

08002df8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b086      	sub	sp, #24
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e00:	2300      	movs	r3, #0
 8002e02:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002e04:	2300      	movs	r3, #0
 8002e06:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 0301 	and.w	r3, r3, #1
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d105      	bne.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d035      	beq.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002e20:	4b67      	ldr	r3, [pc, #412]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002e22:	2200      	movs	r2, #0
 8002e24:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002e26:	f7fe fca9 	bl	800177c <HAL_GetTick>
 8002e2a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002e2c:	e008      	b.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002e2e:	f7fe fca5 	bl	800177c <HAL_GetTick>
 8002e32:	4602      	mov	r2, r0
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	1ad3      	subs	r3, r2, r3
 8002e38:	2b02      	cmp	r3, #2
 8002e3a:	d901      	bls.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e3c:	2303      	movs	r3, #3
 8002e3e:	e0ba      	b.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002e40:	4b60      	ldr	r3, [pc, #384]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d1f0      	bne.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	019a      	lsls	r2, r3, #6
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	071b      	lsls	r3, r3, #28
 8002e58:	495a      	ldr	r1, [pc, #360]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002e60:	4b57      	ldr	r3, [pc, #348]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002e62:	2201      	movs	r2, #1
 8002e64:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002e66:	f7fe fc89 	bl	800177c <HAL_GetTick>
 8002e6a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002e6c:	e008      	b.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002e6e:	f7fe fc85 	bl	800177c <HAL_GetTick>
 8002e72:	4602      	mov	r2, r0
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	1ad3      	subs	r3, r2, r3
 8002e78:	2b02      	cmp	r3, #2
 8002e7a:	d901      	bls.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e7c:	2303      	movs	r3, #3
 8002e7e:	e09a      	b.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002e80:	4b50      	ldr	r3, [pc, #320]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d0f0      	beq.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0302 	and.w	r3, r3, #2
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	f000 8083 	beq.w	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	60fb      	str	r3, [r7, #12]
 8002e9e:	4b49      	ldr	r3, [pc, #292]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea2:	4a48      	ldr	r2, [pc, #288]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002ea4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ea8:	6413      	str	r3, [r2, #64]	; 0x40
 8002eaa:	4b46      	ldr	r3, [pc, #280]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eb2:	60fb      	str	r3, [r7, #12]
 8002eb4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002eb6:	4b44      	ldr	r3, [pc, #272]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a43      	ldr	r2, [pc, #268]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ebc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ec0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002ec2:	f7fe fc5b 	bl	800177c <HAL_GetTick>
 8002ec6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002ec8:	e008      	b.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002eca:	f7fe fc57 	bl	800177c <HAL_GetTick>
 8002ece:	4602      	mov	r2, r0
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	1ad3      	subs	r3, r2, r3
 8002ed4:	2b02      	cmp	r3, #2
 8002ed6:	d901      	bls.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8002ed8:	2303      	movs	r3, #3
 8002eda:	e06c      	b.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002edc:	4b3a      	ldr	r3, [pc, #232]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d0f0      	beq.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002ee8:	4b36      	ldr	r3, [pc, #216]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002eea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ef0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d02f      	beq.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f00:	693a      	ldr	r2, [r7, #16]
 8002f02:	429a      	cmp	r2, r3
 8002f04:	d028      	beq.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f06:	4b2f      	ldr	r3, [pc, #188]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f0e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002f10:	4b2e      	ldr	r3, [pc, #184]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002f12:	2201      	movs	r2, #1
 8002f14:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002f16:	4b2d      	ldr	r3, [pc, #180]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002f18:	2200      	movs	r2, #0
 8002f1a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002f1c:	4a29      	ldr	r2, [pc, #164]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002f22:	4b28      	ldr	r3, [pc, #160]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f26:	f003 0301 	and.w	r3, r3, #1
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d114      	bne.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002f2e:	f7fe fc25 	bl	800177c <HAL_GetTick>
 8002f32:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f34:	e00a      	b.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f36:	f7fe fc21 	bl	800177c <HAL_GetTick>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	1ad3      	subs	r3, r2, r3
 8002f40:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d901      	bls.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8002f48:	2303      	movs	r3, #3
 8002f4a:	e034      	b.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f4c:	4b1d      	ldr	r3, [pc, #116]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002f4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f50:	f003 0302 	and.w	r3, r3, #2
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d0ee      	beq.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f60:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f64:	d10d      	bne.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8002f66:	4b17      	ldr	r3, [pc, #92]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	68db      	ldr	r3, [r3, #12]
 8002f72:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002f76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f7a:	4912      	ldr	r1, [pc, #72]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	608b      	str	r3, [r1, #8]
 8002f80:	e005      	b.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002f82:	4b10      	ldr	r3, [pc, #64]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	4a0f      	ldr	r2, [pc, #60]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002f88:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002f8c:	6093      	str	r3, [r2, #8]
 8002f8e:	4b0d      	ldr	r3, [pc, #52]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002f90:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	68db      	ldr	r3, [r3, #12]
 8002f96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f9a:	490a      	ldr	r1, [pc, #40]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0308 	and.w	r3, r3, #8
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d003      	beq.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	7c1a      	ldrb	r2, [r3, #16]
 8002fb0:	4b07      	ldr	r3, [pc, #28]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002fb2:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002fb4:	2300      	movs	r3, #0
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3718      	adds	r7, #24
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	42470068 	.word	0x42470068
 8002fc4:	40023800 	.word	0x40023800
 8002fc8:	40007000 	.word	0x40007000
 8002fcc:	42470e40 	.word	0x42470e40
 8002fd0:	424711e0 	.word	0x424711e0

08002fd4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b084      	sub	sp, #16
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d101      	bne.n	8002fea <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e066      	b.n	80030b8 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	7f5b      	ldrb	r3, [r3, #29]
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d105      	bne.n	8003000 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f7fe fabe 	bl	800157c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2202      	movs	r2, #2
 8003004:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	22ca      	movs	r2, #202	; 0xca
 800300c:	625a      	str	r2, [r3, #36]	; 0x24
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	2253      	movs	r2, #83	; 0x53
 8003014:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f000 fa45 	bl	80034a6 <RTC_EnterInitMode>
 800301c:	4603      	mov	r3, r0
 800301e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8003020:	7bfb      	ldrb	r3, [r7, #15]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d12c      	bne.n	8003080 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	687a      	ldr	r2, [r7, #4]
 800302e:	6812      	ldr	r2, [r2, #0]
 8003030:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003034:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003038:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	6899      	ldr	r1, [r3, #8]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	685a      	ldr	r2, [r3, #4]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	691b      	ldr	r3, [r3, #16]
 8003048:	431a      	orrs	r2, r3
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	695b      	ldr	r3, [r3, #20]
 800304e:	431a      	orrs	r2, r3
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	430a      	orrs	r2, r1
 8003056:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	687a      	ldr	r2, [r7, #4]
 800305e:	68d2      	ldr	r2, [r2, #12]
 8003060:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	6919      	ldr	r1, [r3, #16]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	041a      	lsls	r2, r3, #16
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	430a      	orrs	r2, r1
 8003074:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f000 fa4c 	bl	8003514 <RTC_ExitInitMode>
 800307c:	4603      	mov	r3, r0
 800307e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8003080:	7bfb      	ldrb	r3, [r7, #15]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d113      	bne.n	80030ae <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003094:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	699a      	ldr	r2, [r3, #24]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	430a      	orrs	r2, r1
 80030a6:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2201      	movs	r2, #1
 80030ac:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	22ff      	movs	r2, #255	; 0xff
 80030b4:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 80030b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3710      	adds	r7, #16
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}

080030c0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80030c0:	b590      	push	{r4, r7, lr}
 80030c2:	b087      	sub	sp, #28
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	60f8      	str	r0, [r7, #12]
 80030c8:	60b9      	str	r1, [r7, #8]
 80030ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80030cc:	2300      	movs	r3, #0
 80030ce:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	7f1b      	ldrb	r3, [r3, #28]
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d101      	bne.n	80030dc <HAL_RTC_SetTime+0x1c>
 80030d8:	2302      	movs	r3, #2
 80030da:	e087      	b.n	80031ec <HAL_RTC_SetTime+0x12c>
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2201      	movs	r2, #1
 80030e0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2202      	movs	r2, #2
 80030e6:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d126      	bne.n	800313c <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d102      	bne.n	8003102 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	2200      	movs	r2, #0
 8003100:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	781b      	ldrb	r3, [r3, #0]
 8003106:	4618      	mov	r0, r3
 8003108:	f000 fa29 	bl	800355e <RTC_ByteToBcd2>
 800310c:	4603      	mov	r3, r0
 800310e:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	785b      	ldrb	r3, [r3, #1]
 8003114:	4618      	mov	r0, r3
 8003116:	f000 fa22 	bl	800355e <RTC_ByteToBcd2>
 800311a:	4603      	mov	r3, r0
 800311c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800311e:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	789b      	ldrb	r3, [r3, #2]
 8003124:	4618      	mov	r0, r3
 8003126:	f000 fa1a 	bl	800355e <RTC_ByteToBcd2>
 800312a:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800312c:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	78db      	ldrb	r3, [r3, #3]
 8003134:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003136:	4313      	orrs	r3, r2
 8003138:	617b      	str	r3, [r7, #20]
 800313a:	e018      	b.n	800316e <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003146:	2b00      	cmp	r3, #0
 8003148:	d102      	bne.n	8003150 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	2200      	movs	r2, #0
 800314e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	785b      	ldrb	r3, [r3, #1]
 800315a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800315c:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800315e:	68ba      	ldr	r2, [r7, #8]
 8003160:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003162:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	78db      	ldrb	r3, [r3, #3]
 8003168:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800316a:	4313      	orrs	r3, r2
 800316c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	22ca      	movs	r2, #202	; 0xca
 8003174:	625a      	str	r2, [r3, #36]	; 0x24
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	2253      	movs	r2, #83	; 0x53
 800317c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800317e:	68f8      	ldr	r0, [r7, #12]
 8003180:	f000 f991 	bl	80034a6 <RTC_EnterInitMode>
 8003184:	4603      	mov	r3, r0
 8003186:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8003188:	7cfb      	ldrb	r3, [r7, #19]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d120      	bne.n	80031d0 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003198:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800319c:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	689a      	ldr	r2, [r3, #8]
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80031ac:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	6899      	ldr	r1, [r3, #8]
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	68da      	ldr	r2, [r3, #12]
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	691b      	ldr	r3, [r3, #16]
 80031bc:	431a      	orrs	r2, r3
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	430a      	orrs	r2, r1
 80031c4:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80031c6:	68f8      	ldr	r0, [r7, #12]
 80031c8:	f000 f9a4 	bl	8003514 <RTC_ExitInitMode>
 80031cc:	4603      	mov	r3, r0
 80031ce:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80031d0:	7cfb      	ldrb	r3, [r7, #19]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d102      	bne.n	80031dc <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2201      	movs	r2, #1
 80031da:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	22ff      	movs	r2, #255	; 0xff
 80031e2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2200      	movs	r2, #0
 80031e8:	771a      	strb	r2, [r3, #28]

  return status;
 80031ea:	7cfb      	ldrb	r3, [r7, #19]
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	371c      	adds	r7, #28
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd90      	pop	{r4, r7, pc}

080031f4 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b086      	sub	sp, #24
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	60f8      	str	r0, [r7, #12]
 80031fc:	60b9      	str	r1, [r7, #8]
 80031fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003200:	2300      	movs	r3, #0
 8003202:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	691b      	ldr	r3, [r3, #16]
 8003214:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003226:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800322a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	0c1b      	lsrs	r3, r3, #16
 8003230:	b2db      	uxtb	r3, r3
 8003232:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003236:	b2da      	uxtb	r2, r3
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	0a1b      	lsrs	r3, r3, #8
 8003240:	b2db      	uxtb	r3, r3
 8003242:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003246:	b2da      	uxtb	r2, r3
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	b2db      	uxtb	r3, r3
 8003250:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003254:	b2da      	uxtb	r2, r3
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	0d9b      	lsrs	r3, r3, #22
 800325e:	b2db      	uxtb	r3, r3
 8003260:	f003 0301 	and.w	r3, r3, #1
 8003264:	b2da      	uxtb	r2, r3
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d11a      	bne.n	80032a6 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	4618      	mov	r0, r3
 8003276:	f000 f98f 	bl	8003598 <RTC_Bcd2ToByte>
 800327a:	4603      	mov	r3, r0
 800327c:	461a      	mov	r2, r3
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	785b      	ldrb	r3, [r3, #1]
 8003286:	4618      	mov	r0, r3
 8003288:	f000 f986 	bl	8003598 <RTC_Bcd2ToByte>
 800328c:	4603      	mov	r3, r0
 800328e:	461a      	mov	r2, r3
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	789b      	ldrb	r3, [r3, #2]
 8003298:	4618      	mov	r0, r3
 800329a:	f000 f97d 	bl	8003598 <RTC_Bcd2ToByte>
 800329e:	4603      	mov	r3, r0
 80032a0:	461a      	mov	r2, r3
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80032a6:	2300      	movs	r3, #0
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	3718      	adds	r7, #24
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}

080032b0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80032b0:	b590      	push	{r4, r7, lr}
 80032b2:	b087      	sub	sp, #28
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	60f8      	str	r0, [r7, #12]
 80032b8:	60b9      	str	r1, [r7, #8]
 80032ba:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80032bc:	2300      	movs	r3, #0
 80032be:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	7f1b      	ldrb	r3, [r3, #28]
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d101      	bne.n	80032cc <HAL_RTC_SetDate+0x1c>
 80032c8:	2302      	movs	r3, #2
 80032ca:	e071      	b.n	80033b0 <HAL_RTC_SetDate+0x100>
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2201      	movs	r2, #1
 80032d0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2202      	movs	r2, #2
 80032d6:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d10e      	bne.n	80032fc <HAL_RTC_SetDate+0x4c>
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	785b      	ldrb	r3, [r3, #1]
 80032e2:	f003 0310 	and.w	r3, r3, #16
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d008      	beq.n	80032fc <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	785b      	ldrb	r3, [r3, #1]
 80032ee:	f023 0310 	bic.w	r3, r3, #16
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	330a      	adds	r3, #10
 80032f6:	b2da      	uxtb	r2, r3
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d11c      	bne.n	800333c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	78db      	ldrb	r3, [r3, #3]
 8003306:	4618      	mov	r0, r3
 8003308:	f000 f929 	bl	800355e <RTC_ByteToBcd2>
 800330c:	4603      	mov	r3, r0
 800330e:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	785b      	ldrb	r3, [r3, #1]
 8003314:	4618      	mov	r0, r3
 8003316:	f000 f922 	bl	800355e <RTC_ByteToBcd2>
 800331a:	4603      	mov	r3, r0
 800331c:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800331e:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	789b      	ldrb	r3, [r3, #2]
 8003324:	4618      	mov	r0, r3
 8003326:	f000 f91a 	bl	800355e <RTC_ByteToBcd2>
 800332a:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800332c:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	781b      	ldrb	r3, [r3, #0]
 8003334:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003336:	4313      	orrs	r3, r2
 8003338:	617b      	str	r3, [r7, #20]
 800333a:	e00e      	b.n	800335a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	78db      	ldrb	r3, [r3, #3]
 8003340:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	785b      	ldrb	r3, [r3, #1]
 8003346:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003348:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800334a:	68ba      	ldr	r2, [r7, #8]
 800334c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800334e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	781b      	ldrb	r3, [r3, #0]
 8003354:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003356:	4313      	orrs	r3, r2
 8003358:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	22ca      	movs	r2, #202	; 0xca
 8003360:	625a      	str	r2, [r3, #36]	; 0x24
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	2253      	movs	r2, #83	; 0x53
 8003368:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800336a:	68f8      	ldr	r0, [r7, #12]
 800336c:	f000 f89b 	bl	80034a6 <RTC_EnterInitMode>
 8003370:	4603      	mov	r3, r0
 8003372:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8003374:	7cfb      	ldrb	r3, [r7, #19]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d10c      	bne.n	8003394 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003384:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003388:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800338a:	68f8      	ldr	r0, [r7, #12]
 800338c:	f000 f8c2 	bl	8003514 <RTC_ExitInitMode>
 8003390:	4603      	mov	r3, r0
 8003392:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8003394:	7cfb      	ldrb	r3, [r7, #19]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d102      	bne.n	80033a0 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2201      	movs	r2, #1
 800339e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	22ff      	movs	r2, #255	; 0xff
 80033a6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2200      	movs	r2, #0
 80033ac:	771a      	strb	r2, [r3, #28]

  return status;
 80033ae:	7cfb      	ldrb	r3, [r7, #19]
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	371c      	adds	r7, #28
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd90      	pop	{r4, r7, pc}

080033b8 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b086      	sub	sp, #24
 80033bc:	af00      	add	r7, sp, #0
 80033be:	60f8      	str	r0, [r7, #12]
 80033c0:	60b9      	str	r1, [r7, #8]
 80033c2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80033c4:	2300      	movs	r3, #0
 80033c6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80033d2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80033d6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	0c1b      	lsrs	r3, r3, #16
 80033dc:	b2da      	uxtb	r2, r3
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	0a1b      	lsrs	r3, r3, #8
 80033e6:	b2db      	uxtb	r3, r3
 80033e8:	f003 031f 	and.w	r3, r3, #31
 80033ec:	b2da      	uxtb	r2, r3
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033fa:	b2da      	uxtb	r2, r3
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	0b5b      	lsrs	r3, r3, #13
 8003404:	b2db      	uxtb	r3, r3
 8003406:	f003 0307 	and.w	r3, r3, #7
 800340a:	b2da      	uxtb	r2, r3
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d11a      	bne.n	800344c <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	78db      	ldrb	r3, [r3, #3]
 800341a:	4618      	mov	r0, r3
 800341c:	f000 f8bc 	bl	8003598 <RTC_Bcd2ToByte>
 8003420:	4603      	mov	r3, r0
 8003422:	461a      	mov	r2, r3
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	785b      	ldrb	r3, [r3, #1]
 800342c:	4618      	mov	r0, r3
 800342e:	f000 f8b3 	bl	8003598 <RTC_Bcd2ToByte>
 8003432:	4603      	mov	r3, r0
 8003434:	461a      	mov	r2, r3
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	789b      	ldrb	r3, [r3, #2]
 800343e:	4618      	mov	r0, r3
 8003440:	f000 f8aa 	bl	8003598 <RTC_Bcd2ToByte>
 8003444:	4603      	mov	r3, r0
 8003446:	461a      	mov	r2, r3
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800344c:	2300      	movs	r3, #0
}
 800344e:	4618      	mov	r0, r3
 8003450:	3718      	adds	r7, #24
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}

08003456 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003456:	b580      	push	{r7, lr}
 8003458:	b084      	sub	sp, #16
 800345a:	af00      	add	r7, sp, #0
 800345c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800345e:	2300      	movs	r3, #0
 8003460:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	68da      	ldr	r2, [r3, #12]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003470:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003472:	f7fe f983 	bl	800177c <HAL_GetTick>
 8003476:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003478:	e009      	b.n	800348e <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800347a:	f7fe f97f 	bl	800177c <HAL_GetTick>
 800347e:	4602      	mov	r2, r0
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	1ad3      	subs	r3, r2, r3
 8003484:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003488:	d901      	bls.n	800348e <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800348a:	2303      	movs	r3, #3
 800348c:	e007      	b.n	800349e <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	f003 0320 	and.w	r3, r3, #32
 8003498:	2b00      	cmp	r3, #0
 800349a:	d0ee      	beq.n	800347a <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800349c:	2300      	movs	r3, #0
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3710      	adds	r7, #16
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}

080034a6 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80034a6:	b580      	push	{r7, lr}
 80034a8:	b084      	sub	sp, #16
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80034ae:	2300      	movs	r3, #0
 80034b0:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80034b2:	2300      	movs	r3, #0
 80034b4:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d122      	bne.n	800350a <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	68da      	ldr	r2, [r3, #12]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80034d2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80034d4:	f7fe f952 	bl	800177c <HAL_GetTick>
 80034d8:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80034da:	e00c      	b.n	80034f6 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80034dc:	f7fe f94e 	bl	800177c <HAL_GetTick>
 80034e0:	4602      	mov	r2, r0
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80034ea:	d904      	bls.n	80034f6 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2204      	movs	r2, #4
 80034f0:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003500:	2b00      	cmp	r3, #0
 8003502:	d102      	bne.n	800350a <RTC_EnterInitMode+0x64>
 8003504:	7bfb      	ldrb	r3, [r7, #15]
 8003506:	2b01      	cmp	r3, #1
 8003508:	d1e8      	bne.n	80034dc <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800350a:	7bfb      	ldrb	r3, [r7, #15]
}
 800350c:	4618      	mov	r0, r3
 800350e:	3710      	adds	r7, #16
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}

08003514 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b084      	sub	sp, #16
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800351c:	2300      	movs	r3, #0
 800351e:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	68da      	ldr	r2, [r3, #12]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800352e:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	f003 0320 	and.w	r3, r3, #32
 800353a:	2b00      	cmp	r3, #0
 800353c:	d10a      	bne.n	8003554 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f7ff ff89 	bl	8003456 <HAL_RTC_WaitForSynchro>
 8003544:	4603      	mov	r3, r0
 8003546:	2b00      	cmp	r3, #0
 8003548:	d004      	beq.n	8003554 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2204      	movs	r2, #4
 800354e:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003554:	7bfb      	ldrb	r3, [r7, #15]
}
 8003556:	4618      	mov	r0, r3
 8003558:	3710      	adds	r7, #16
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}

0800355e <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800355e:	b480      	push	{r7}
 8003560:	b085      	sub	sp, #20
 8003562:	af00      	add	r7, sp, #0
 8003564:	4603      	mov	r3, r0
 8003566:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8003568:	2300      	movs	r3, #0
 800356a:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 800356c:	e005      	b.n	800357a <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800356e:	7bfb      	ldrb	r3, [r7, #15]
 8003570:	3301      	adds	r3, #1
 8003572:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8003574:	79fb      	ldrb	r3, [r7, #7]
 8003576:	3b0a      	subs	r3, #10
 8003578:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800357a:	79fb      	ldrb	r3, [r7, #7]
 800357c:	2b09      	cmp	r3, #9
 800357e:	d8f6      	bhi.n	800356e <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8003580:	7bfb      	ldrb	r3, [r7, #15]
 8003582:	011b      	lsls	r3, r3, #4
 8003584:	b2da      	uxtb	r2, r3
 8003586:	79fb      	ldrb	r3, [r7, #7]
 8003588:	4313      	orrs	r3, r2
 800358a:	b2db      	uxtb	r3, r3
}
 800358c:	4618      	mov	r0, r3
 800358e:	3714      	adds	r7, #20
 8003590:	46bd      	mov	sp, r7
 8003592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003596:	4770      	bx	lr

08003598 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8003598:	b480      	push	{r7}
 800359a:	b085      	sub	sp, #20
 800359c:	af00      	add	r7, sp, #0
 800359e:	4603      	mov	r3, r0
 80035a0:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 80035a2:	2300      	movs	r3, #0
 80035a4:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80035a6:	79fb      	ldrb	r3, [r7, #7]
 80035a8:	091b      	lsrs	r3, r3, #4
 80035aa:	b2db      	uxtb	r3, r3
 80035ac:	461a      	mov	r2, r3
 80035ae:	0092      	lsls	r2, r2, #2
 80035b0:	4413      	add	r3, r2
 80035b2:	005b      	lsls	r3, r3, #1
 80035b4:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 80035b6:	79fb      	ldrb	r3, [r7, #7]
 80035b8:	f003 030f 	and.w	r3, r3, #15
 80035bc:	b2da      	uxtb	r2, r3
 80035be:	7bfb      	ldrb	r3, [r7, #15]
 80035c0:	4413      	add	r3, r2
 80035c2:	b2db      	uxtb	r3, r3
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	3714      	adds	r7, #20
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr

080035d0 <__libc_init_array>:
 80035d0:	b570      	push	{r4, r5, r6, lr}
 80035d2:	4d0d      	ldr	r5, [pc, #52]	; (8003608 <__libc_init_array+0x38>)
 80035d4:	4c0d      	ldr	r4, [pc, #52]	; (800360c <__libc_init_array+0x3c>)
 80035d6:	1b64      	subs	r4, r4, r5
 80035d8:	10a4      	asrs	r4, r4, #2
 80035da:	2600      	movs	r6, #0
 80035dc:	42a6      	cmp	r6, r4
 80035de:	d109      	bne.n	80035f4 <__libc_init_array+0x24>
 80035e0:	4d0b      	ldr	r5, [pc, #44]	; (8003610 <__libc_init_array+0x40>)
 80035e2:	4c0c      	ldr	r4, [pc, #48]	; (8003614 <__libc_init_array+0x44>)
 80035e4:	f000 f820 	bl	8003628 <_init>
 80035e8:	1b64      	subs	r4, r4, r5
 80035ea:	10a4      	asrs	r4, r4, #2
 80035ec:	2600      	movs	r6, #0
 80035ee:	42a6      	cmp	r6, r4
 80035f0:	d105      	bne.n	80035fe <__libc_init_array+0x2e>
 80035f2:	bd70      	pop	{r4, r5, r6, pc}
 80035f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80035f8:	4798      	blx	r3
 80035fa:	3601      	adds	r6, #1
 80035fc:	e7ee      	b.n	80035dc <__libc_init_array+0xc>
 80035fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8003602:	4798      	blx	r3
 8003604:	3601      	adds	r6, #1
 8003606:	e7f2      	b.n	80035ee <__libc_init_array+0x1e>
 8003608:	08003658 	.word	0x08003658
 800360c:	08003658 	.word	0x08003658
 8003610:	08003658 	.word	0x08003658
 8003614:	0800365c 	.word	0x0800365c

08003618 <memset>:
 8003618:	4402      	add	r2, r0
 800361a:	4603      	mov	r3, r0
 800361c:	4293      	cmp	r3, r2
 800361e:	d100      	bne.n	8003622 <memset+0xa>
 8003620:	4770      	bx	lr
 8003622:	f803 1b01 	strb.w	r1, [r3], #1
 8003626:	e7f9      	b.n	800361c <memset+0x4>

08003628 <_init>:
 8003628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800362a:	bf00      	nop
 800362c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800362e:	bc08      	pop	{r3}
 8003630:	469e      	mov	lr, r3
 8003632:	4770      	bx	lr

08003634 <_fini>:
 8003634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003636:	bf00      	nop
 8003638:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800363a:	bc08      	pop	{r3}
 800363c:	469e      	mov	lr, r3
 800363e:	4770      	bx	lr
